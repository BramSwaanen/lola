	nl_ps	fol_ps	nl_h	fol_h	label	e_pred	c_pred
0	All logicians are engineers ## All linguists are logicians	all x. (Logician(x) -> Engineer(x)) ## all x. (Linguist(x) -> Logician(x))	All linguists are engineers	all x. (Linguist(x) -> Engineer(x))	e	True	False
1	All logicians are engineers ## No linguists are logicians	all x. (Logician(x) -> Engineer(x)) ## not exists x. (Linguist(x) & Logician(x))	All linguists are engineers	all x. (Linguist(x) -> Engineer(x))	n	False	False
2	All logicians are engineers ## Some linguists are logicians	all x. (Logician(x) -> Engineer(x)) ## exists x. (Linguist(x) & Logician(x))	All linguists are engineers	all x. (Linguist(x) -> Engineer(x))	n	False	False
3	All logicians are engineers ## Some linguists are non logicians	all x. (Logician(x) -> Engineer(x)) ## exists x. (Linguist(x) & not Logician(x))	All linguists are engineers	all x. (Linguist(x) -> Engineer(x))	n	False	False
4	No logicians are engineers ## All linguists are logicians	not exists x. (Logician(x) & Engineer(x)) ## all x. (Linguist(x) -> Logician(x))	All linguists are engineers	all x. (Linguist(x) -> Engineer(x))	n	False	False
5	No logicians are engineers ## No linguists are logicians	not exists x. (Logician(x) & Engineer(x)) ## not exists x. (Linguist(x) & Logician(x))	All linguists are engineers	all x. (Linguist(x) -> Engineer(x))	n	False	False
6	No logicians are engineers ## Some linguists are logicians	not exists x. (Logician(x) & Engineer(x)) ## exists x. (Linguist(x) & Logician(x))	All linguists are engineers	all x. (Linguist(x) -> Engineer(x))	c	False	True
7	No logicians are engineers ## Some linguists are non logicians	not exists x. (Logician(x) & Engineer(x)) ## exists x. (Linguist(x) & not Logician(x))	All linguists are engineers	all x. (Linguist(x) -> Engineer(x))	n	False	False
8	Some logicians are engineers ## All linguists are logicians	exists x. (Logician(x) & Engineer(x)) ## all x. (Linguist(x) -> Logician(x))	All linguists are engineers	all x. (Linguist(x) -> Engineer(x))	n	False	False
9	Some logicians are engineers ## No linguists are logicians	exists x. (Logician(x) & Engineer(x)) ## not exists x. (Linguist(x) & Logician(x))	All linguists are engineers	all x. (Linguist(x) -> Engineer(x))	n	False	False
