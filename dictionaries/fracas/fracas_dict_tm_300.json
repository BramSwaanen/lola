{"It is true that ITEL won the contract in 1992.": "WonContract(ITEL, 1992)", "It took the representatives more than a week to read the report.": "\u2200x (Representative(x) \u2227 ReadReport(x) \u2192 MoreThanWeek(x))", "It will be the case that in a few weeks Smith will discover that she has been duped; and she will be furious.": "\u2200x (FewWeeks(x) \u2227 Smith(x) \u2192 (DiscoversDuped(x) \u2227 Furious(x)))", "Itel was in Birmingham in 1993.": "\u2203x (Itel(x) \u2227 InBirmingham(x, 1993))", "John and his colleagues went to a meeting. They hated it.": "\u2200x\u2200y (John(x) \u2227 Colleague(y) \u2227 Meeting(m) \u2192 (WentTo(x, m) \u2227 Hated(y, m)))", "John bought a car.": "\u2203x (Car(x) \u2227 BoughtBy(x, John))", "John found Mary before Bill found Mary.": "\u2200x \u2200y \u2200z (Person(x) \u2227 Person(y) \u2227 Person(z) \u2227 Found(x, z) \u2227 Found(y, z) \u2192 FoundBefore(x, y))", "John found Mary before Bill.": "Found(John, Mary) \u2227 Found(Bill, Mary) \u2227 \u00acFound(John, Bill) \u2227 \u00acFound(Bill, John)", "John found Mary before John found Bill.": "\u2200x \u2200y \u2200z (Person(x) \u2227 Person(y) \u2227 Person(z) \u2227 Found(x, y) \u2227 Found(x, z) \u2192 FoundBefore(y, z))", "John had his paper accepted. Bill doesn't know why.": "\u2200x \u2200y (John(x) \u2227 Paper(y) \u2192 Accepted(y)) \u2227 (Bill(z) \u2227 Paper(y) \u2192 \u00acKnowsWhy(z, y))", "John has a diamond.": "HasDiamond(john)", "John has a genuine diamond.": "\u2200x (Diamond(x) \u2227 Genuine(x) \u2192 OwnedBy(x, John))", "John has spoken to Mary. Bill is going to.": "\u2200x \u2200y \u2200z (John(x) \u2227 Mary(y) \u2227 Bill(z) \u2192 (SpokenTo(x, y) \u2227 GoingTo(z)))", "John has spoken to Mary. The students have too.": "\u2200x \u2200y (John(x) \u2227 Mary(y) \u2192 SpokenTo(x, y)) \u2227 \u2200z \u2200w (Student(z) \u2227 Student(w) \u2192 SpokenTo(z, w))", "John hated the meeting.": "Hated(john, meeting)", "John is a cleverer politician than Bill.": "Cleverer(John, Bill)", "John is a fatter politician than Bill.": "Fatter(john, bill)", "John is a former successful university student.": "FormerSuccessfulStudent(john)", "John is a former university student.": "FormerStudent(john)", "John is a man and Mary is a woman. John represents his company and so does Mary.": "\u2200x \u2200y (Man(x) \u2227 Woman(y) \u2227 RepresentsCompany(x) \u2227 RepresentsCompany(y) \u2192 (John(x) \u2227 Mary(y)))", "John is a successful former university student.": "SuccessfulFormerStudent(john)", "John is a university student.": "UniversityStudent(john)", "John is cleverer than Bill.": "Cleverer(john, bill)", "John is fatter than Bill.": "Fatter(john, bill)", "John is going to Paris by car, and the students by train.": "\u2200x \u2200y (John(x) \u2227 Paris(y) \u2192 GoesByCar(x, y)) \u2227 (Students(x) \u2227 Train(y) \u2192 GoesByTrain(x, y))", "John is successful.": "Successful(john)", "John needed to buy a car, and Bill did.": "\u2200x\u2200y (NeededToBuyCar(x) \u2227 NeededToBuyCar(y) \u2192 (John(x) \u2227 Bill(y)))", "John owns a car. Bill owns one too.": "\u2200x \u2200y (OwnsCar(x) \u2227 OwnsCar(y) \u2192 (John(x) \u2227 Bill(y)))", "John owns a fast red car. Bill owns a slow one.": "\u2200x \u2200y (John(x) \u2227 Bill(y) \u2192 (OwnsFastRedCar(x) \u2227 OwnsSlowCar(y)))", "John owns a red car. Bill owns a blue one.": "\u2200x \u2200y (John(x) \u2227 RedCar(x) \u2227 Bill(y) \u2227 BlueCar(y))", "John owns a red car. Bill owns a fast one.": "\u2200x \u2200y (John(x) \u2227 Owns(x, RedCar) \u2227 Bill(y) \u2227 Owns(y, FastCar))", "John said Bill had been hurt.": "Said(john, bill, hurt)", "John said Bill had hurt himself.": "Said(john, Bill, hurt)", "John said Bill wrote a report.": "Said(john, bill, wroteReport)", "John said Mary wrote a report, and Bill did too.": "\u2200x \u2200y \u2200z (John(x) \u2227 Mary(y) \u2227 Bill(z) \u2192 (Said(x, y) \u2227 Said(x, z)))", "John said that Mary wrote a report, and that Bill did too.": "\u2200x \u2200y \u2200z (John(x) \u2227 Mary(y) \u2227 Bill(z) \u2192 (Said(x, y, Report) \u2227 Said(x, z, Report)))", "John spoke to Mary at four o'clock. And Bill did at five o'clock.": "\u2203x \u2203y \u2203z (Person(x) \u2227 Person(y) \u2227 Person(z) \u2227 SpokenTo(x, y, four) \u2227 SpokenTo(x, z, five))", "John spoke to Mary at four o'clock. So did Bill.": "\u2200x\u2200y\u2200z (John(x) \u2227 Mary(y) \u2227 FourOclock(z) \u2192 SpokeAt(x, y, z)) \u2227 (Bill(x) \u2227 FourOclock(z) \u2192 SpokeAt(x, z))", "John spoke to Mary on Friday.": "SpokeTo(john, mary, friday)", "John spoke to Mary on Monday. Bill didn't.": "\u2203x \u2203y \u2203z (Person(x) \u2227 Person(y) \u2227 Person(z) \u2227 SpeaksTo(x, y, Monday) \u2227 \u00acSpeaksTo(b, z, Monday))", "John spoke to Mary on Thursday. And on Friday.": "\u2203x \u2203y (Person(x) \u2227 Person(y) \u2227 SpokenTo(x, y, Thursday) \u2227 SpokenTo(x, y, Friday))", "John spoke to Mary.": "\u2203x \u2203y (Person(x) \u2227 Person(y) \u2227 SpokenTo(x, y))", "John spoke to Mary. And to Sue.": "\u2203x\u2203y\u2203z (Person(x) \u2227 Person(y) \u2227 Person(z) \u2227 SpokenTo(x, y) \u2227 SpokenTo(x, z))", "John spoke to Mary. On Friday.": "Spoke(john, mary, friday)", "John spoke to Mary. So did Bill.": "\u2203x \u2203y (Person(x) \u2227 Person(y) \u2227 SpokenTo(x, y) \u2227 SpokenTo(y, x))", "John spoke to Mary. So did Bill. John spoke to Mary at four o'clock.": "\u2200x\u2200y\u2200z (Speak(x, y, z) \u2194 (John(x) \u2227 Mary(y) \u2227 FourOclock(z)))", "John spoke to Sue.": "SpokeTo(john, sue)", "John wanted to buy a car, and he did.": "WantedToBuyCar(john) \u2227 BoughtCar(john)", "John wants to know how many men work part time, and which.": "\u2200x (Man(x) \u2227 PartTime(x) \u2192 WantsToKnow(John, x))", "John wants to know how many men work part time. And women.": "\u2200x (WantsToKnow(x, MenWorkingPartTime) \u2227 WantsToKnow(x, WomenWorkingPartTime))", "John wants to know how many women work part time.": "WantsToKnow(John, NumberOfWomenWorkingPartTime)", "John wants to know which men work part time.": "\u2200x (Man(x) \u2227 PartTime(x) \u2192 WantsToKnow(John, x))", "John went to Paris by car, and Bill by train to Berlin.": "\u2200x\u2200y (John(x) \u2227 Bill(y) \u2192 (WentToParisByCar(x) \u2227 WentToBerlinByTrain(y)))", "John went to Paris by car, and Bill by train.": "\u2200x \u2200y (John(x) \u2227 Paris(y) \u2192 WentByCar(x, y)) \u2227 (Bill(x) \u2227 Train(y) \u2192 WentByTrain(x, y))", "John went to Paris by car, and Bill to Berlin.": "\u2200x \u2200y (John(x) \u2227 Paris(y) \u2192 WentByCar(x, y)) \u2227 (Bill(x) \u2227 Berlin(y) \u2192 WentByCar(x, y))", "John went to Paris by car. Bill by train.": "\u2200x \u2200y (John(x) \u2227 Bill(y) \u2192 (WentToParis(x) \u2227 WentToParis(y) \u2227 ByCar(x) \u2227 ByTrain(y)))", "John wrote a report, and Bill said Peter did too.": "\u2200x \u2200y \u2200z (John(x) \u2227 Report(y) \u2227 Bill(z) \u2192 (Wrote(x, y) \u2227 Said(z, Peter, DidToo)))", "John's colleagues hated the meeting.": "\u2200x (Colleague(x) \u2227 Meeting(m) \u2227 Attended(x, m) \u2192 Hated(x, m))", "Jones claimed Smith had costed Jones' proposal.": "ClaimedCosted(jones, smith, proposal)", "Jones claimed Smith had costed Smith's proposal.": "ClaimedCosted(jones, smith, proposal)", "Jones claimed he had costed Smith's proposal.": "ClaimedCosted(jones, smith)", "Jones claimed he had costed his own proposal.": "ClaimedCostedProposal(jones)", "Jones graduated in March and has been employed ever since. Jones has been unemployed in the past.": "\u2200x (Jones(x) \u2192 (GraduatedInMarch(x) \u2227 Employed(x) \u2227 \u2203y (Unemployed(y) \u2227 Past(y) \u2227 Person(y) \u2227 Person(x))))", "Jones has a company car.": "HasCompanyCar(jones)", "Jones has more than one company car.": "\u2203x (CompanyCar(x) \u2227 Owns(x, Jones))", "Jones left after Smith left.": "Left(jones) \u2227 Left(smith) \u2227 LeftAfter(smith, jones)", "Jones left before Smith left.": "LeftBefore(jones, smith)", "Jones left the meeting.": "LeftMeeting(jones)", "Jones represents Jones' company.": "Represents(Jones, JonesCompany)", "Jones represents Smith's company.": "Represents(Jones, Smith) \u2227 Represents(Jones, Company)", "Jones revised the contract. Smith revised the contract. Jones revised the contract after Smith did.": "\u2200x \u2200y (Jones(x) \u2227 Smith(y) \u2192 (RevisedContract(x) \u2227 RevisedContract(y) \u2227 RevisedAfter(x, y)))", "Jones revised the contract. Smith revised the contract. Jones revised the contract before Smith did.": "\u2200x\u2200y (Jones(x) \u2227 Smith(y) \u2192 (RevisedContract(x) \u2227 RevisedContract(y) \u2227 RevisedBefore(x, y)))", "Jones signed the contract.": "SignedContract(jones, contract)", "Jones swam after Smith swam.": "\u2200x \u2200y (Jones(x) \u2227 Smith(y) \u2192 SwamAfter(x, y))", "Jones swam to the shore after Smith swam to the shore.": "\u2200x\u2200y (Jones(x) \u2227 Smith(y) \u2192 (SwamToShore(x) \u2227 SwamToShore(y)))", "Jones was present after Smith was present.": "\u2200x \u2200y (Present(x) \u2227 Present(y) \u2192 PresentAfter(x, y))", "Jones was present before Smith was present.": "\u2200x \u2200y (Present(x) \u2227 Present(y) \u2192 Before(x, y))", "Jones was unemployed at some time before he graduated.": "\u2203x (Unemployed(x) \u2227 Jones(x) \u2227 BeforeGraduation(x))", "Jones was writing a report after Smith was writing a report.": "WasWritingReport(jones) \u2227 WasWritingReport(smith)", "Jones was writing a report before Smith was writing a report.": "\u2200x\u2200y (WritingReport(x) \u2227 WritingReport(y) \u2192 (WritingReportBefore(x, y)))", "Just one accountant attended the meeting.": "\u2203x (Accountant(x) \u2227 AttendedMeeting(x))", "Kim is a clever person.": "Clever(Kim)", "Kim is a clever politician.": "Clever(Kim)", "Kim is clever.": "Clever(kim)", "Last week I already knew that when, in a month's time, Smith would discover that she had been duped she would be furious.": "\u2200x (LastWeek(x) \u2227 MonthsTime(x) \u2227 Smith(x) \u2227 DiscoveredDuped(x) \u2192 Furious(x))", "MFI has a service contract for all its computers.": "\u2200x (MFI(x) \u2227 Computer(x) \u2192 HasServiceContract(x))", "Many British delegates obtained interesting results from the survey.": "\u2203x (BritishDelegate(x) \u2227 ObtainedInterestingResults(x))", "Many delegates obtained interesting results from the survey.": "\u2200x (Delegate(x) \u2227 ObtainedInterestingResults(x) \u2192 Survey(x))", "Many delegates obtained results from the survey.": "\u2200x (Delegate(x) \u2192 ObtainedResultsFromSurvey(x))", "Many great tenors are German.": "\u2203x (Tenor(x) \u2227 Great(x) \u2227 German(x))", "Mary has a workstation.": "\u2203x (Workstation(x) \u2227 OwnedBy(x, Mary))", "Mary is female.": "Female(mary)", "Mary represents John's company.": "Represents(Mary, John) \u2227 Represents(Mary, Company)", "Mary represents her own company.": "RepresentsOwnCompany(mary)", "Mary used a workstation.": "\u2203x (Workstation(x) \u2227 UsedBy(x, Mary))", "Mary used her workstation.": "UsedWorkstation(mary)", "Mary's story lasted as long as Jones's updating the program.": "LastedAsLongAs(mary, jones)", "Mary's workstation was used.": "\u2203x (Workstation(x) \u2227 UsedBy(x, Mary))", "Mickey is a large animal.": "LargeAnimal(mickey)", "Mickey is a small animal.": "\u2200x (Animal(x) \u2227 Small(x) \u2192 Mickey(x))"}