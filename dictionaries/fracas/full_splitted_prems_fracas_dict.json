{"There was an Italian who became the world's greatest tenor.": "\u2203x (Italian(x) \u2227 WorldsGreatestTenor(x))", "An Italian became the world's greatest tenor.": "\u2203x (Italian(x) \u2227 WorldsGreatestTenor(x))", "There are Italian men who want to be a great tenor.": "\u2203x (ItalianMan(x) \u2227 WantsToBeGreatTenor(x))", "Every Italian man wants to be a great tenor.": "\u2200x (ItalianMan(x) \u2192 WantsToBeGreatTenor(x))", "Some Italian men are great tenors.": "\u2203x (ItalianMan(x) \u2227 GreatTenor(x))", "All Italian men want to be a great tenor.": "\u2200x (ItalianMan(x) \u2192 WantsToBeGreatTenor(x))", "There are Italian tenors who want to be great.": "\u2203x (ItalianTenor(x) \u2227 WantsToBeGreat(x))", "Each Italian tenor wants to be great.": "\u2200x (ItalianTenor(x) \u2192 WantsToBeGreat(x))", "Some Italian tenors are great.": "\u2203x (ItalianTenor(x) \u2227 Great(x))", "There are really ambitious tenors who are Italian.": "\u2203x (Tenor(x) \u2227 Ambitious(x) \u2227 Italian(x))", "The really ambitious tenors are Italian.": "\u2200x (Tenor(x) \u2227 Ambitious(x) \u2192 Italian(x))", "There are really great tenors who are modest.": "\u2203x (Tenor(x) \u2227 Great(x) \u2227 Modest(x))", "No really great tenors are modest.": "\u2200x (Tenor(x) \u2227 ReallyGreat(x) \u2192 \u00acModest(x))", "There are great tenors who are Swedish.": "\u2203x (Tenor(x) \u2227 Great(x) \u2227 Swedish(x))", "Some great tenors are Swedish.": "\u2203x (GreatTenor(x) \u2227 Swedish(x))", "There are great tenors who are German.": "\u2203x (Tenor(x) \u2227 Great(x) \u2227 German(x))", "Many great tenors are German.": "\u2203x (Tenor(x) \u2227 Great(x) \u2227 German(x))", "There are great tenors who are British.": "\u2203x (Tenor(x) \u2227 Great(x) \u2227 British(x))", "Several great tenors are British.": "\u2203x (Tenor(x) \u2227 Great(x) \u2227 British(x))", "There are great tenors who are Italian.": "\u2203x (Tenor(x) \u2227 Great(x) \u2227 Italian(x))", "Most great tenors are Italian.": "\u2200x (GreatTenor(x) \u2192 Italian(x))", "There are great tenors who sing popular music.": "\u2203x (Tenor(x) \u2227 Great(x) \u2227 SingsPopularMusic(x))", "A few great tenors sing popular music.": "\u2203x (Tenor(x) \u2227 Great(x) \u2227 SingsPopularMusic(x))", "Some great tenors like popular music.": "\u2203x (GreatTenor(x) \u2227 LikesPopularMusic(x))", "There are great tenors who are poor.": "\u2203x (GreatTenor(x) \u2227 Poor(x))", "Few great tenors are poor.": "\u2203x (GreatTenor(x) \u2227 Poor(x))", "Both leading tenors are indispensable.": "\u2200x\u2200y (Tenor(x) \u2227 Tenor(y) \u2192 (Indispensable(x) \u2227 Indispensable(y)))", "Both leading tenors are excellent.": "\u2200x\u2200y (LeadingTenor(x) \u2227 LeadingTenor(y) \u2192 Excellent(x) \u2227 Excellent(y))", "Leading tenors who are excellent are indispensable.": "\u2200x (LeadingTenor(x) \u2227 Excellent(x) \u2192 Indispensable(x))", "Pavarotti is a leading tenor who comes cheap.": "LeadingTenor(pavarotti) \u2227 ComesCheap(pavarotti)", "Neither leading tenor comes cheap.": "\u2200x \u2200y (LeadingTenor(x) \u2227 LeadingTenor(y) \u2192 \u00acCheap(x) \u2227 \u00acCheap(y))", "One of the leading tenors is Pavarotti.": "\u2203x (Tenor(x) \u2227 Leading(x) \u2227 Pavarotti(x))", "There are tenors who will take part in the concert.": "\u2203x (Tenor(x) \u2227 TakesPartInConcert(x))", "At least three tenors will take part in the concert.": "\u2203x (Tenor(x) \u2227 TakesPartInConcert(x))", "There are tenors who will contribute their fees to charity.": "\u2203x (Tenor(x) \u2227 ContributesFeesToCharity(x))", "At most two tenors will contribute their fees to charity.": "\u2203x\u2203y (Tenor(x) \u2227 Tenor(y) \u2227 ContributesFeesToCharity(x) \u2227 ContributesFeesToCharity(y))", "An Irishman won a Nobel prize.": "\u2203x (Irishman(x) \u2227 WonNobelPrize(x))", "An Irishman won the Nobel prize for literature.": "\u2203x (Irishman(x) \u2227 WonNobelPrize(x, Literature))", "Every European can travel freely within Europe.": "\u2200x (European(x) \u2192 CanTravelFreelyWithinEurope(x))", "Every European has the right to live in Europe.": "\u2200x (European(x) \u2192 RightToLiveInEurope(x))", "Every European is a person.": "\u2200x (European(x) \u2192 Person(x))", "Every person who has the right to live in Europe can travel freely within Europe.": "\u2200x (RightToLiveInEurope(x) \u2192 CanTravelFreelyWithinEurope(x))", "All Europeans can travel freely within Europe.": "\u2200x (European(x) \u2192 CanTravelFreelyWithinEurope(x))", "All Europeans have the right to live in Europe.": "\u2200x (European(x) \u2192 RightToLiveInEurope(x))", "Each European can travel freely within Europe.": "\u2200x (European(x) \u2192 CanTravelFreelyWithinEurope(x))", "Each European has the right to live in Europe.": "\u2200x (European(x) \u2192 RightToLiveInEurope(x))", "The residents of member states can travel freely within Europe.": "\u2200x (ResidentOfMemberState(x) \u2192 CanTravelFreelyWithinEurope(x))", "The residents of member states have the right to live in Europe.": "\u2200x (ResidentOfMemberState(x) \u2192 RightToLiveInEurope(x))", "All residents of member states are individuals.": "\u2200x (ResidentOfMemberState(x) \u2192 Individual(x))", "Every individual who has the right to live in Europe can travel freely within Europe.": "\u2200x (RightToLiveInEurope(x) \u2192 CanTravelFreelyWithinEurope(x))", "No delegate finished the report.": "\u00ac\u2203x (Delegate(x) \u2227 FinishedReport(x))", "No delegate finished the report on time.": "\u00ac\u2203x (Delegate(x) \u2227 FinishedReportOnTime(x))", "Some delegates finished the survey.": "\u2203x (Delegate(x) \u2227 FinishedSurvey(x))", "Some delegates finished the survey on time.": "\u2203x (Delegate(x) \u2227 FinishedSurveyOnTime(x))", "Many delegates obtained results from the survey.": "\u2200x (Delegate(x) \u2192 ObtainedResultsFromSurvey(x))", "Many delegates obtained interesting results from the survey.": "\u2200x (Delegate(x) \u2227 ObtainedInterestingResults(x) \u2192 Survey(x))", "Several delegates got the results published.": "\u2203x \u2203y \u2203z (Delegate(x) \u2227 Delegate(y) \u2227 Delegate(z) \u2227 PublishedResults(x) \u2227 PublishedResults(y) \u2227 PublishedResults(z))", "Several delegates got the results published in major national newspapers.": "\u2203x \u2203y \u2203z (Delegate(x) \u2227 Delegate(y) \u2227 Delegate(z) \u2227 NationalNewspaper(n) \u2227 Major(m) \u2227 PublishedIn(x, n, m) \u2227 PublishedIn(y, n, m) \u2227 PublishedIn(z, n, m))", "Most Europeans can travel freely within Europe.": "\u2200x (European(x) \u2192 CanTravelFreelyWithinEurope(x))", "Most Europeans are resident in Europe.": "\u2200x (European(x) \u2192 ResidentIn(x, Europe))", "All Europeans are people.": "\u2200x (European(x) \u2192 Person(x))", "All people who are resident in Europe can travel freely within Europe.": "\u2200x (Person(x) \u2227 ResidentInEurope(x) \u2192 CanTravelFreelyWithinEurope(x))", "At least a few committee members are from Scandinavia.": "\u2203x (CommitteeMember(x) \u2227 FromScandinavia(x))", "A few committee members are from Sweden.": "\u2203x\u2203y (CommitteeMember(x) \u2227 CommitteeMember(y) \u2227 FromSweden(x) \u2227 FromSweden(y))", "All committee members are people.": "\u2200x (CommitteeMember(x) \u2192 Person(x))", "All people who are from Sweden are from Scandinavia.": "\u2200x (Person(x) \u2227 FromSweden(x) \u2192 FromScandinavia(x))", "There are few committee members from southern Europe.": "\u2203x (CommitteeMember(x) \u2227 FromSouthernEurope(x))", "Few committee members are from Portugal.": "\u2203x (CommitteeMember(x) \u2227 FromPortugal(x))", "All people who are from Portugal are from southern Europe.": "\u2200x (Person(x) \u2227 FromPortugal(x) \u2192 SouthernEuropean(x))", "Both commissioners used to be businessmen.": "\u2200x\u2200y (Commissioner(x) \u2227 Commissioner(y) \u2192 (UsedToBeBusinessman(x) \u2227 UsedToBeBusinessman(y)))", "Both commissioners used to be leading businessmen.": "\u2200x\u2200y (Commissioner(x) \u2227 Commissioner(y) \u2192 (UsedToBeLeadingBusinessman(x) \u2227 UsedToBeLeadingBusinessman(y)))", "Neither commissioner spends time at home.": "\u2200x \u2200y (Commissioner(x) \u2227 Commissioner(y) \u2192 \u00acSpendsTimeAtHome(x) \u2227 \u00acSpendsTimeAtHome(y))", "Neither commissioner spends a lot of time at home.": "\u00ac\u2203x (Commissioner(x) \u2227 SpendsA lotOfTimeAtHome(x))", "At least three commissioners spend time at home.": "\u2203x\u2203y\u2203z (Commissioner(x) \u2227 Commissioner(y) \u2227 Commissioner(z) \u2227 SpendsTimeAtHome(x) \u2227 SpendsTimeAtHome(y) \u2227 SpendsTimeAtHome(z))", "At least three commissioners spend a lot of time at home.": "\u2203x\u2203y\u2203z (Commissioner(x) \u2227 Commissioner(y) \u2227 Commissioner(z) \u2227 (SpendsTimeAtHome(x) \u2227 SpendsTimeAtHome(y) \u2227 SpendsTimeAtHome(z)))", "At most ten commissioners spend time at home.": "\u2203x (Commissioner(x) \u2227 SpendsTimeAtHome(x, 10))", "At most ten commissioners spend a lot of time at home.": "\u2203x (Commissioner(x) \u2227 SpendsA lotOfTimeAtHome(x)) \u2227 \u2203y (Commissioner(y) \u2227 \u00acSpendsA lotOfTimeAtHome(y)) \u2227 \u2203z (Commissioner(z) \u2227 \u00acSpendsA lotOfTimeAtHome(z)) \u2227 \u2200w (Commissioner(w) \u2227 \u00acSpendsA lotOfTimeAtHome(w)) \u2227 \u2200v (Commission", "The residents of member states have the right to live anywhere in Europe.": "\u2200x (ResidentOfMemberState(x) \u2192 RightToLiveAnywhereInEurope(x))", "Every individual who has the right to live anywhere in Europe can travel freely within Europe.": "\u2200x (RightToLiveInEurope(x) \u2192 CanTravelFreelyInEurope(x))", "Some delegate finished the report on time.": "\u2203x (Delegate(x) \u2227 FinishedReportOnTime(x))", "At least a few committee members are from Sweden.": "\u2203x (CommitteeMember(x) \u2227 FromSweden(x))", "A few committee members are from Scandinavia.": "\u2203x\u2203y\u2203z (CommitteeMember(x) \u2227 Scandinavia(y) \u2227 CommitteeMember(z) \u2227 From(x, y) \u2227 From(z, y))", "There are few committee members from Portugal.": "\u2203x (CommitteeMember(x) \u2227 From(x, Portugal))", "Few committee members are from southern Europe.": "\u2203x (CommitteeMember(x) \u2227 FromSouthernEurope(x))", "One of the commissioners spends a lot of time at home.": "\u2203x (Commissioner(x) \u2227 SpendsTimeAtHome(x))", "A Scandinavian won a Nobel prize.": "\u2203x (Scandinavian(x) \u2227 WonNobelPrize(x))", "A Swede won a Nobel prize.": "\u2203x (Swede(x) \u2227 WonNobelPrize(x))", "Every Swede is a Scandinavian.": "\u2200x (Swedish(x) \u2192 Scandinavian(x))", "Every resident of the North American continent can travel freely within Europe.": "\u2200x (ResidentOfNorthAmericanContinent(x) \u2192 CanTravelFreelyWithinEurope(x))", "Every Canadian resident can travel freely within Europe.": "\u2200x (CanadianResident(x) \u2192 CanTravelFreelyWithinEurope(x))", "Every Canadian resident is a resident of the North American continent.": "\u2200x (CanadianResident(x) \u2192 ResidentOfNorthAmericanContinent(x))", "All residents of the North American continent can travel freely within Europe.": "\u2200x (ResidentOfNorthAmericanContinent(x) \u2192 CanTravelFreelyWithinEurope(x))", "All Canadian residents can travel freely within Europe.": "\u2200x (CanadianResident(x) \u2192 CanTravelFreelyWithinEurope(x))", "Each resident of the North American continent can travel freely within Europe.": "\u2200x (ResidentOfNorthAmericanContinent(x) \u2192 CanTravelFreelyWithinEurope(x))", "Each Canadian resident can travel freely within Europe.": "\u2200x (CanadianResident(x) \u2192 CanTravelFreelyWithinEurope(x))", "The residents of western countries have the right to live in Europe.": "\u2200x (ResidentOfWesternCountry(x) \u2192 RightToLiveInEurope(x))", "The residents of major western countries can travel freely within Europe.": "\u2200x (ResidentOfMajorWesternCountry(x) \u2192 CanTravelFreelyWithinEurope(x))", "All residents of major western countries are residents of western countries.": "\u2200x (ResidentOfMajorWesternCountry(x) \u2192 ResidentOfWesternCountry(x))", "No Scandinavian delegate finished the report on time.": "\u00ac\u2203x (ScandinavianDelegate(x) \u2227 FinishedReportOnTime(x))", "Some Irish delegates finished the survey on time.": "\u2203x (IrishDelegate(x) \u2227 FinishedSurveyOnTime(x))", "Many British delegates obtained interesting results from the survey.": "\u2203x (BritishDelegate(x) \u2227 ObtainedInterestingResults(x))", "Several Portuguese delegates got the results published in major national newspapers.": "\u2203x \u2203y \u2203z (PortugueseDelegate(x) \u2227 Newspaper(y) \u2227 National(z) \u2227 Results(x) \u2227 PublishedIn(x, y) \u2227 In(y, z))", "Most Europeans who are resident in Europe can travel freely within Europe.": "\u2200x (European(x) \u2227 ResidentInEurope(x) \u2192 CanTravelFreelyWithinEurope(x))", "A few female committee members are from Scandinavia.": "\u2203x (FemaleCommitteeMember(x) \u2227 FromScandinavia(x))", "Few female committee members are from southern Europe.": "\u2203x (FemaleCommitteeMember(x) \u2227 FromSouthernEurope(x))", "Both commissioners used to be in business.": "\u2200x\u2200y (Commissioner(x) \u2227 Commissioner(y) \u2192 UsedToBeInBusiness(x) \u2227 UsedToBeInBusiness(y))", "Both female commissioners used to be in business.": "\u2200x (Commissioner(x) \u2227 Female(x) \u2192 UsedToBeInBusiness(x))", "Neither female commissioner spends a lot of time at home.": "\u00ac\u2203x (Commissioner(x) \u2227 Female(x) \u2227 SpendsA lotOfTimeAtHome(x))", "At least three female commissioners spend time at home.": "\u2203x\u2203y\u2203z (FemaleCommissioner(x) \u2227 FemaleCommissioner(y) \u2227 FemaleCommissioner(z) \u2227 SpendsTimeAtHome(x) \u2227 SpendsTimeAtHome(y) \u2227 SpendsTimeAtHome(z))", "At most ten female commissioners spend time at home.": "\u2203x (Commissioner(x) \u2227 Female(x) \u2227 SpendsTimeAtHome(x, 10))", "The residents of major western countries have the right to live in Europe.": "\u2200x (ResidentOfMajorWesternCountry(x) \u2192 RightToLiveInEurope(x))", "The residents of western countries can travel freely within Europe.": "\u2200x (ResidentOfWesternCountry(x) \u2192 CanTravelFreelyWithinEurope(x))", "Some Scandinavian delegate finished the report on time.": "\u2203x (ScandinavianDelegate(x) \u2227 FinishedReportOnTime(x))", "Most Europeans who are resident outside Europe can travel freely within Europe.": "\u2200x (European(x) \u2227 ResidentOutsideEurope(x) \u2192 CanTravelFreelyWithinEurope(x))", "At least a few female committee members are from Scandinavia.": "\u2203x (FemaleCommitteeMember(x) \u2227 FromScandinavia(x))", "One of the female commissioners spends a lot of time at home.": "\u2203x (Commissioner(x) \u2227 Female(x) \u2227 SpendsTimeAtHome(x))", "At least three male commissioners spend time at home.": "\u2203x (Commissioner(x) \u2227 Male(x) \u2227 SpendsTimeAtHome(x))", "Jones signed the contract.": "SignedContract(jones, contract)", "Smith, Jones and Anderson signed the contract.": "\u2203x \u2203y \u2203z (SignedContract(x) \u2227 SignedContract(y) \u2227 SignedContract(z) \u2227 Smith(x) \u2227 Jones(y) \u2227 Anderson(z))", "Smith, Jones and several lawyers signed the contract.": "\u2203x \u2203y \u2203z (Smith(x) \u2227 Jones(y) \u2227 Lawyer(z) \u2227 SignedContract(x, y, z))", "Either Smith, Jones or Anderson signed the contract.": "SignedContract(smith) \u2295 SignedContract(jones) \u2295 SignedContract(anderson)", "If Smith and Anderson did not sign the contract, Jones signed the contract.": "\u2200x \u2200y \u2200z (Smith(x) \u2227 Anderson(y) \u2227 Jones(z) \u2227 \u00ac(SignedContract(x, y) \u2227 SignedContract(y, z)) \u2192 SignedContract(z, x))", "Six lawyers signed the contract.": "\u2203x \u2203y \u2203z \u2203w \u2203v \u2203u (Lawyer(x) \u2227 Lawyer(y) \u2227 Lawyer(z) \u2227 Lawyer(w) \u2227 Lawyer(v) \u2227 Lawyer(u) \u2227 SignedContract(x, y, z, w, v, u))", "Exactly two lawyers and three accountants signed the contract.": "\u2203x \u2203y \u2203z (Lawyer(x) \u2227 Lawyer(y) \u2227 Accountant(z) \u2227 SignedContract(x, y, z))", "Six accountants signed the contract.": "\u2203x \u2203y \u2203z \u2203w \u2203u \u2203v (Accountant(x) \u2227 Accountant(y) \u2227 Accountant(z) \u2227 Accountant(w) \u2227 Accountant(u) \u2227 Accountant(v) \u2227 SignedContract(x, y, z, w, u, v))", "Every representative was at the meeting.": "\u2200x (Representative(x) \u2192 \u2203y (Meeting(y) \u2227 Attended(x, y)))", "Every representative and client was at the meeting.": "\u2200x\u2200y (Representative(x) \u2227 Client(y) \u2192 AtMeeting(x, y))", "Every representative and every client was at the meeting.": "\u2200x \u2200y (Representative(x) \u2227 Client(y) \u2192 AtMeeting(x, y))", "Every representative or client was at the meeting.": "\u2200x (Representative(x) \u2228 Client(x) \u2192 AtMeeting(x))", "The chairman read out every item on the agenda.": "\u2200x\u2200y (Chairman(x) \u2227 Agenda(y) \u2192 ReadOutEveryItem(x, y))", "The chairman read out the items on the agenda.": "\u2200x\u2200y (Chairman(x) \u2227 Agenda(y) \u2192 ReadsOutItems(x, y))", "Everyone at the meeting voted for a new chairman.": "\u2200x (PersonAtMeeting(x) \u2192 VotedForNewChairman(x))", "The people who were at the meeting voted for a new chairman.": "\u2200x (Person(x) \u2227 AtMeeting(x) \u2192 VotedForNewChairman(x))", "All the people who were at the meeting voted for a new chairman.": "\u2200x (Person(x) \u2227 AtMeeting(x) \u2192 VotedForNewChairman(x))", "The people who were at the meeting all voted for a new chairman.": "\u2200x (Person(x) \u2227 AtMeeting(x) \u2192 VotedForNewChairman(x))", "Every inhabitant of Cambridge voted for a Labour MP.": "\u2200x (InhabitantOfCambridge(x) \u2192 VotedForLabourMP(x))", "The inhabitants of Cambridge voted for a Labour MP.": "\u2200x (InhabitantOfCambridge(x) \u2192 VotedForLabourMP(x))", "Every Ancient Greek was a noted philosopher.": "\u2200x (AncientGreek(x) \u2192 Philosopher(x))", "The Ancient Greeks were noted philosophers.": "\u2200x (AncientGreek(x) \u2192 Philosophers(x))", "The Ancient Greeks were all noted philosophers.": "\u2200x (AncientGreek(x) \u2192 Philosopher(x))", "The system failure was blamed on one or more software faults.": "\u2200x (SystemFailure(x) \u2192 \u2203y (SoftwareFault(y) \u2227 BlamedOn(x, y)))", "Software faults were blamed for the system failure.": "\u2200x (SoftwareFault(x) \u2192 BlamedForSystemFailure(x))", "Bug # 32-985 was blamed for the system failure.": "\u2203x (Bug(x) \u2227 SystemFailure(y) \u2227 BlamedFor(x, y))", "Bug # 32-985 is a known software fault.": "KnownSoftwareFault(bug32985)", "Smith was impressed by the system's performance.": "ImpressedByPerformance(smith, system)", "Clients at the demonstration were all impressed by the system's performance.": "\u2200x (Client(x) \u2227 AtDemonstration(x) \u2192 ImpressedBySystem(x))", "Smith was a client at the demonstration.": "\u2203x \u2203y (Smith(x) \u2227 Demonstration(y) \u2227 ClientAt(x, y))", "Most clients at the demonstration were impressed by the system's performance.": "\u2200x (Client(x) \u2227 AtDemonstration(x) \u2192 ImpressedBySystemPerformance(x))", "Clients at the demonstration were impressed by the system's performance.": "\u2200x (Client(x) \u2227 AtDemonstration(x) \u2192 ImpressedBySystemPerformance(x))", "Smith is likely to make a poor stock market trader.": "\u2200x (Smith(x) \u2192 PoorStockMarketTrader(x))", "University graduates make poor stock-market traders.": "\u2200x (UniversityGraduate(x) \u2192 PoorStockMarketTrader(x))", "Smith is a university graduate.": "UniversityGraduate(smith)", "Smith will make a poor stock market trader.": "\u2200x (Smith(x) \u2192 PoorStockMarketTrader(x))", "Jones has a company car.": "HasCompanyCar(jones)", "All APCOM managers have company cars.": "\u2200x (APCOMManager(x) \u2192 HasCompanyCar(x))", "Jones is an APCOM manager.": "\u2200x (APCOMManager(x) \u2194 (Person(x) \u2227 Manager(x) \u2227 WorksForAPCOM(x)))", "Jones has more than one company car.": "\u2203x (CompanyCar(x) \u2227 Owns(x, Jones))", "No accountants attended the meeting.": "\u00ac\u2203x (Accountant(x) \u2227 AttendedMeeting(x))", "Just one accountant attended the meeting.": "\u2203x (Accountant(x) \u2227 AttendedMeeting(x))", "No accountant attended the meeting.": "\u00ac\u2203x (Accountant(x) \u2227 AttendedMeeting(x))", "Some accountants attended the meeting.": "\u2203x (Accountant(x) \u2227 AttendedMeeting(x))", "Some accountant attended the meeting.": "\u2203x (Accountant(x) \u2227 AttendedMeeting(x))", "Smith and Jones signed two contracts.": "\u2203x \u2203y (Smith(x) \u2227 Jones(y) \u2227 Contract(z) \u2227 Signed(x, z) \u2227 Signed(y, z))", "Smith signed one contract.": "\u2203x (Contract(x) \u2227 SignedBy(x, Smith))", "Jones signed another contract.": "\u2203x (Contract(x) \u2227 SignedBy(x, Jones))", "Smith signed two contracts.": "\u2203x \u2203y (Smith(x) \u2227 Contract(y) \u2227 Signed(x, y))", "Jones signed two contracts.": "\u2203x \u2203y (Jones(x) \u2227 Contract(y) \u2227 Signed(x, y))", "Jones also signed them.": "\u2200x (Signed(x) \u2192 (Jones(x) \u2228 Smith(x)))", "Mary's workstation was used.": "\u2203x (Workstation(x) \u2227 UsedBy(x, Mary))", "Mary used her workstation.": "UsedWorkstation(mary)", "Mary has a workstation.": "\u2203x (Workstation(x) \u2227 OwnedBy(x, Mary))", "Mary is female.": "Female(mary)", "Every student used her workstation.": "\u2200x (Student(x) \u2192 UsedWorkstation(x))", "Mary is a student.": "Student(mary)", "Mary used a workstation.": "\u2203x (Workstation(x) \u2227 UsedBy(x, Mary))", "No student used her workstation.": "\u00ac\u2203x (Student(x) \u2227 Workstation(x))", "Smith chaired a meeting.": "ChairedMeeting(smith)", "Smith attended a meeting.": "AttendedMeeting(smith)", "She chaired it.": "Chaired(she, it)", "Smith delivered a report, an invoice and a project proposal to ITEL.": "\u2200x\u2200y\u2200z (Smith(x) \u2227 Report(y) \u2227 Invoice(z) \u2227 ProjectProposal(y) \u2192 DeliveredTo(x, y, z, ITEL))", "Smith delivered a report to ITEL.": "DeliveredReport(smith, itel)", "She also delivered them an invoice.": "\u2200x\u2200y (Woman(x) \u2227 Delivered(x, y) \u2227 Invoice(y) \u2192 DeliveredInvoice(x, y))", "And she delivered them a project proposal.": "\u2200x\u2200y (Woman(x) \u2227 Project(y) \u2227 DeliveredProposal(x, y) \u2192 ProjectManager(x, y))", "Every committee has a chairman appointed by members of the committee.": "\u2200x (Committee(x) \u2192 \u2203y (Chairman(y) \u2227 AppointedByMembers(y, x)))", "Every committee has a chairman.": "\u2200x (Committee(x) \u2192 \u2203y (Chairman(y) \u2227 ChairmanOf(y, x)))", "He is appointed its members.": "\u2200x\u2200y (Appoints(x, y) \u2194 (Member(y) \u2227 AppointedBy(y, x)))", "There are some reports from ITEL on Smith's desk.": "\u2203x (Report(x) \u2227 From(x, ITEL) \u2227 On(x, Smith))", "ITEL has sent most of the reports Smith needs.": "\u2200x\u2200y (ITEL(x) \u2227 Smith(y) \u2192 SentReports(x, y))", "They are on her desk.": "\u2203x (Desk(x) \u2227 On(x, her))", "Two machines have been removed.": "\u2203x \u2203y (Machine(x) \u2227 Machine(y) \u2227 Removed(x) \u2227 Removed(y))", "Two out of ten machines are missing.": "\u2203x (Machine(x) \u2227 Missing(x)) \u2227 \u2203y (Machine(y) \u2227 Missing(y)) \u2227 \u2203z (Machine(z) \u2227 Missing(z)) \u2227 \u2203w (Machine(w) \u2227 Missing(w)) \u2227 \u2203v (Machine(v) \u2227 Missing(v)) \u2227 \u2203u (Machine(u) \u2227 Missing(u)) \u2227 \u2203t (Machine(t) \u2227", "They have been removed.": "\u2200x (Removed(x))", "Eight machines have been removed.": "\u2203x (Machine(x) \u2227 Removed(x)) \u2227 \u2203y (Machine(y) \u2227 Removed(y)) \u2227 \u2203z (Machine(z) \u2227 Removed(z)) \u2227 \u2203w (Machine(w) \u2227 Removed(w)) \u2227 \u2203v (Machine(v) \u2227 Removed(v)) \u2227 \u2203u (Machine(u) \u2227 Removed(u)) \u2227 \u2203t (Machine(t) \u2227", "Ten machines were here yesterday.": "\u2203x (Machine(x) \u2227 Here(x, yest) \u2227 Machine(x) \u2227 Yesterday(yest))", "They were all here yesterday.": "\u2200x (Person(x) \u2192 \u2203y (Yesterday(y) \u2227 Here(x, y)))", "Smith and Jones put two machines in the lobby.": "\u2200x\u2200y (Smith(x) \u2227 Jones(y) \u2192 (PutMachine(x, lobby) \u2227 PutMachine(y, lobby)))", "Smith took a machine on Tuesday, and Jones took a machine on Wednesday.": "\u2200x\u2200y (Smith(x) \u2227 Machine(y) \u2192 TookOnTuesday(x, y)) \u2227 (Jones(x) \u2227 Machine(y) \u2192 TookOnWednesday(x, y))", "They put them in the lobby.": "\u2200x\u2200y (They(x) \u2227 PutIn(x, y) \u2192 InLobby(y))", "John's colleagues hated the meeting.": "\u2200x (Colleague(x) \u2227 Meeting(m) \u2227 Attended(x, m) \u2192 Hated(x, m))", "John and his colleagues went to a meeting.": "\u2200x\u2200y (John(x) \u2227 Colleague(y) \u2192 WentToMeeting(x, y))", "They hated it.": "\u2200x (Hated(x) \u2194 (They(x) \u2227 Hated(x)))", "John hated the meeting.": "Hated(john, meeting)", "Every department rents a line from BT.": "\u2200x (Department(x) \u2192 RentsLineFromBT(x))", "Each department has a dedicated line.": "\u2200x (Department(x) \u2192 HasDedicatedLine(x))", "They rent them from BT.": "\u2200x\u2200y (RentFrom(x, y) \u2194 (Rent(x, y) \u2227 From(y, BT)))", "The sales department rents a line from BT.": "RentLine(salesDepartment, BT)", "The sales department rents it from BT.": "RentsFrom(SalesDepartment, BT)", "ITEL maintains all the computers that GFI owns.": "\u2200x\u2200y (ITEL(x) \u2227 GFI(y) \u2192 MaintainsComputers(x, y))", "GFI owns several computers.": "\u2200x (GFI(x) \u2192 OwnsComputers(x))", "ITEL maintains them.": "\u2200x (ITEL(x) \u2192 Maintains(x))", "MFI has a service contract for all its computers.": "\u2200x (MFI(x) \u2227 Computer(x) \u2192 HasServiceContract(x))", "Every customer who owns a computer has a service contract for it.": "\u2200x (Customer(x) \u2227 OwnsComputer(x) \u2192 HasServiceContract(x))", "MFI is a customer that owns exactly one computer.": "\u2200x (MFI(x) \u2192 OwnsExactlyOneComputer(x))", "MFI is a customer that owns several computers.": "\u2200x (MFI(x) \u2192 OwnsSeveralComputers(x))", "Smith took five laptop computers to the meeting.": "\u2203x (Smith(x) \u2227 Took(x, y) \u2227 LaptopComputer(y) \u2227 NumberOf(y, 5) \u2227 AtMeeting(y))", "Every executive who had a laptop computer brought it to take notes at the meeting.": "\u2200x (Executive(x) \u2227 HadLaptopComputer(x) \u2192 BroughtToTakeNotesAtMeeting(x))", "Smith is a executive who owns five different laptop computers.": "Executive(smith) \u2227 OwnsLaptopComputers(smith, 5)", "Most companies that own a computer have a service contract for it.": "\u2200x (Company(x) \u2227 OwnsComputer(x) \u2192 HasServiceContract(x))", "There are 100 companies.": "\u2203x (Company(x) \u2227 NumberOfCompanies(x, 100))", "ICM is one of the companies and owns 150 computers.": "\u2200x (ICM(x) \u2192 (Company(x) \u2227 OwnsComputers(x, 150)))", "It does not have service contracts for any of its computers.": "\u2200x (Computer(x) \u2192 \u00acHasServiceContracts(x))", "Each of the other 99 companies owns one computer.": "\u2200x (OtherCompany(x) \u2227 \u2260 100 \u2227 \u2260 0 \u2227 \u2260 1 \u2192 OwnsOneComputer(x))", "They have service contracts for them.": "\u2200x (ServiceContract(x) \u2192 Have(x))", "Smith signed the cover page of R-95-103.": "SignedCoverPage(smith, r95103)", "Every report has a cover page.": "\u2200x (Report(x) \u2192 HasCoverPage(x))", "R-95-103 is a report.": "\u2200x (Report(x) \u2194 R-95-103(x))", "Smith signed the cover page.": "SignedCoverPage(Smith)", "A company director has awarded and been awarded a payrise.": "\u2200x (CompanyDirector(x) \u2192 (AwardedPayrise(x) \u2227 \u00acAwardedPayrise(x)))", "A company director awarded himself a large payrise.": "\u2200x (CompanyDirector(x) \u2227 AwardedLargePayrise(x) \u2192 DirectorAwardsSelf(x))", "John said Bill had been hurt.": "Said(john, bill, hurt)", "John said Bill had hurt himself.": "Said(john, Bill, hurt)", "Someone said John had been hurt.": "\u2203x (Person(x) \u2227 Said(x, John) \u2227 Hurt(x, John))", "Bill spoke to Mary.": "\u2203x \u2203y (Bill(x) \u2227 Mary(y) \u2227 SpokeTo(x, y))", "John spoke to Mary.": "\u2203x \u2203y (Person(x) \u2227 Person(y) \u2227 SpokenTo(x, y))", "So did Bill.": "DidBill(bill)", "Bill spoke to Mary at four o'clock.": "\u2203x \u2203y \u2203z (Bill(x) \u2227 Mary(y) \u2227 FourOclock(z) \u2227 SpokenAt(x, y, z))", "John spoke to Mary at four o'clock.": "SpokeTo(john, mary, fourOclock)", "Bill spoke to Mary at five o'clock.": "\u2203x \u2203y \u2203z (Bill(x) \u2227 Mary(y) \u2227 FiveOclock(z) \u2227 SpokeAt(x, y, z))", "And Bill did at five o'clock.": "\u2200x (Bill(x) \u2227 Time(x, 5) \u2192 DidAt(x, 5))", "Bill will speak to Mary.": "SpeakTo(bill, mary)", "John has spoken to Mary.": "HasSpoken(john, mary)", "Bill is going to.": "GoingTo(bill)", "Bill spoke to Mary on Monday.": "SpokeTo(bill, mary, monday)", "John spoke to Mary on Monday.": "SpokeTo(john, mary, monday)", "Bill didn't.": "\u00acBill(x)", "Bill has spoken to Mary.": "\u2203x \u2203y (Bill(x) \u2227 Mary(y) \u2227 SpokenTo(x, y))", "Has John spoken to Mary?": "\u2203x \u2203y (Person(x) \u2227 Person(y) \u2227 SpokenTo(x, y))", "Bill has.": "Has(bill)", "The students have spoken to Mary.": "\u2200x\u2200y (Student(x) \u2227 Mary(y) \u2192 SpokenTo(x, y))", "The students have too.": "\u2200x (Student(x) \u2192 Too(x))", "Bill went to Paris by train.": "WentToParisByTrain(Bill)", "John went to Paris by car, and Bill by train.": "\u2200x \u2200y (John(x) \u2227 Paris(y) \u2192 WentByCar(x, y)) \u2227 (Bill(x) \u2227 Train(y) \u2192 WentByTrain(x, y))", "Bill went to Berlin by train.": "WentTo(Bill, Berlin, Train)", "John went to Paris by car, and Bill by train to Berlin.": "\u2200x\u2200y (John(x) \u2227 Bill(y) \u2192 (WentToParisByCar(x) \u2227 WentToBerlinByTrain(y)))", "Bill went to Berlin by car.": "WentTo(Bill, Berlin, Car)", "John went to Paris by car, and Bill to Berlin.": "\u2200x \u2200y (John(x) \u2227 Paris(y) \u2192 WentByCar(x, y)) \u2227 (Bill(x) \u2227 Berlin(y) \u2192 WentByCar(x, y))", "The students are going to Paris by train.": "\u2200x (Student(x) \u2192 GoingToParisByTrain(x))", "John is going to Paris by car, and the students by train.": "\u2200x \u2200y (John(x) \u2227 Paris(y) \u2192 GoesByCar(x, y)) \u2227 (Students(x) \u2227 Train(y) \u2192 GoesByTrain(x, y))", "John went to Paris by car.": "WentToParisByCar(john)", "Bill by train.": "\u2200x (Train(x) \u2192 Bill(x))", "Bill owns a car.": "OwnsCar(bill)", "John owns a car.": "OwnsCar(john)", "Bill owns one too.": "\u2203x (Person(x) \u2227 Owns(x, 1))", "There is a car that John and Bill own.": "\u2203x (Car(x) \u2227 OwnedBy(x, John) \u2227 OwnedBy(x, Bill))", "Bill owns a blue car.": "Owns(Bill, BlueCar)", "John owns a red car.": "Owns(john, redCar)", "Bill owns a blue one.": "\u2203x (Person(x) \u2227 Owns(x, BlueOne))", "Bill owns a red car.": "Owns(Bill, RedCar)", "Bill owns a fast car.": "\u2203x (Car(x) \u2227 Fast(x) \u2227 Owns(bill, x))", "Bill owns a fast one.": "\u2203x (FastOne(x) \u2227 Owns(Bill, x))", "Bill owns a fast red car.": "\u2203x (Car(x) \u2227 Owns(bill, x) \u2227 Fast(x) \u2227 Red(x))", "Bill owns a slow red car.": "\u2203x (Car(x) \u2227 Owns(bill, x) \u2227 Slow(x) \u2227 Red(x))", "John owns a fast red car.": "Owns(john, fastRedCar)", "Bill owns a slow one.": "\u2203x (Person(x) \u2227 SlowOne(x))", "Bill knows why John had his paper accepted.": "KnowsWhy(Bill, John, PaperAccepted)", "John had his paper accepted.": "HadPaperAccepted(john)", "Bill doesn't know why.": "\u00ac(\u2203x (Person(x) \u2227 Knows(x, y) \u2227 Why(y)))", "John spoke to Sue.": "SpokeTo(john, sue)", "And to Sue.": "\u2200x (Person(x) \u2227 Name(x, \"Sue\") \u2192 Person(x))", "John spoke to Mary on Friday.": "SpokeTo(john, mary, friday)", "On Friday.": "Friday(x)", "John spoke to Mary on Thursday.": "SpokeTo(john, mary, thursday)", "And on Friday.": "\u2200x (Friday(x) \u2192 OnFriday(x))", "Two women work in the Sales Department.": "\u2203x \u2203y (Woman(x) \u2227 Woman(y) \u2227 WorkInSalesDepartment(x) \u2227 WorkInSalesDepartment(y))", "Twenty men work in the Sales Department.": "\u2203x (Man(x) \u2227 WorksInSalesDepartment(x))", "But only one woman.": "\u2203x (Woman(x) \u2227 \u00ac\u2203y (Woman(y) \u2227 \u00acWoman(z) \u2227 Man(z) \u2227 DifferentFrom(y, z)))", "Forty five women work part time.": "\u2203x (WorkPartTime(x) \u2227 Woman(x) \u2227 Age(x, 45))", "Five men work part time.": "\u2203x \u2203y \u2203z \u2203w \u2203v (Man(x) \u2227 Man(y) \u2227 Man(z) \u2227 Man(w) \u2227 Man(v) \u2227 WorkPartTime(x) \u2227 WorkPartTime(y) \u2227 WorkPartTime(z) \u2227 WorkPartTime(w) \u2227 WorkPartTime(v))", "And forty five women.": "\u2200x (Woman(x) \u2227 Age(x, 45))", "John found Mary before Bill found Mary.": "\u2200x \u2200y \u2200z (Person(x) \u2227 Person(y) \u2227 Person(z) \u2227 Found(x, z) \u2227 Found(y, z) \u2192 FoundBefore(x, y))", "John found Mary before Bill.": "Found(John, Mary) \u2227 Found(Bill, Mary) \u2227 \u00acFound(John, Bill) \u2227 \u00acFound(Bill, John)", "John found Mary before John found Bill.": "\u2200x \u2200y \u2200z (Person(x) \u2227 Person(y) \u2227 Person(z) \u2227 Found(x, y) \u2227 Found(x, z) \u2192 FoundBefore(y, z))", "John wants to know how many women work part time.": "WantsToKnow(John, NumberOfWomenWorkingPartTime)", "John wants to know how many men work part time.": "WantsToKnow(John, NumberOfPartTimeMen)", "And women.": "\u2200x (Woman(x))", "John wants to know which men work part time.": "\u2200x (Man(x) \u2227 PartTime(x) \u2192 WantsToKnow(John, x))", "John wants to know how many men work part time, and which.": "\u2200x (Man(x) \u2227 PartTime(x) \u2192 WantsToKnow(John, x))", "Bill spoke to everyone that John did.": "\u2200x \u2200y (Bill(x) \u2227 John(y) \u2192 SpokeTo(x, y))", "Bill said Mary wrote a report.": "Said(Bill, Mary, WroteReport)", "John said Mary wrote a report, and Bill did too.": "\u2200x \u2200y \u2200z (John(x) \u2227 Mary(y) \u2227 Bill(z) \u2192 (Said(x, y) \u2227 Said(x, z)))", "John said Bill wrote a report.": "Said(john, bill, wroteReport)", "John said that Mary wrote a report, and that Bill did too.": "\u2200x \u2200y \u2200z (John(x) \u2227 Mary(y) \u2227 Bill(z) \u2192 (Said(x, y, Report) \u2227 Said(x, z, Report)))", "Bill said Peter wrote a report.": "Said(bill, peter, wroteReport)", "John wrote a report, and Bill said Peter did too.": "\u2200x \u2200y \u2200z (John(x) \u2227 Report(y) \u2227 Bill(z) \u2192 (Wrote(x, y) \u2227 Said(z, Peter, DidToo)))", "Bill wrote a report.": "\u2203x (Report(x) \u2227 Wrote(bill, x))", "If John wrote a report, then Bill did too.": "\u2200x\u2200y (WroteReport(x) \u2227 WroteReport(y) \u2227 Person(x) \u2227 Person(y) \u2192 DidReport(x, y))", "John wrote a report.": "\u2203x (Report(x) \u2227 Wrote(John, x))", "John bought a car.": "\u2203x (Car(x) \u2227 BoughtBy(x, John))", "John wanted to buy a car, and he did.": "WantedToBuyCar(john) \u2227 BoughtCar(john)", "Bill bought a car.": "\u2203x \u2203y (Bill(x) \u2227 Car(y) \u2227 Bought(x, y))", "John needed to buy a car, and Bill did.": "\u2200x\u2200y (NeededToBuyCar(x) \u2227 NeededToBuyCar(y) \u2192 (John(x) \u2227 Bill(y)))", "Jones represents Jones' company.": "Represents(Jones, JonesCompany)", "Smith represents his company and so does Jones.": "\u2200x\u2200y (Smith(x) \u2227 Company(y) \u2192 Represents(x, y)) \u2227 (Jones(x) \u2227 Company(y) \u2192 Represents(x, y))", "Jones represents Smith's company.": "Represents(Jones, Smith) \u2227 Represents(Jones, Company)", "Smith represents Jones' company.": "Represents(Smith, Jones)", "Jones claimed he had costed his own proposal.": "ClaimedCostedProposal(jones)", "Smith claimed he had costed his proposal and so did Jones.": "\u2200x \u2200y (Smith(x) \u2227 Jones(y) \u2192 (CostedProposal(x) \u2227 CostedProposal(y)))", "Jones claimed he had costed Smith's proposal.": "ClaimedCosted(jones, smith)", "Jones claimed Smith had costed Smith's proposal.": "ClaimedCosted(jones, smith, proposal)", "Jones claimed Smith had costed Jones' proposal.": "ClaimedCosted(jones, smith, proposal)", "Mary represents her own company.": "RepresentsOwnCompany(mary)", "John is a man and Mary is a woman.": "\u2200x \u2200y (Man(x) \u2227 Woman(y) \u2192 (John(x) \u2227 Mary(y)))", "John represents his company and so does Mary.": "\u2200x\u2200y (John(x) \u2227 Mary(y) \u2192 (RepresentsCompany(x) \u2227 RepresentsCompany(y)))", "Mary represents John's company.": "Represents(Mary, John) \u2227 Represents(Mary, Company)", "If it was suggested that Bill and Frank should go together, it was suggested that Carl and Alan should go together.": "\u2200x \u2200y \u2200z \u2200w (Suggested(x, y, z) \u2227 Suggested(y, w, z) \u2192 (Bill(x) \u2227 Frank(y) \u2227 Carl(w) \u2227 Alan(z)))", "Bill suggested to Frank's boss that they should go to the meeting together, and Carl to Alan's wife.": "\u2200x\u2200y\u2200z (Bill(x) \u2227 Frank(y) \u2227 Alan(z) \u2192 (SuggestedTo(x, y, z) \u2227 \u00acSuggestedTo(x, z, y)))", "If it was suggested that Bill and Frank should go together, it was suggested that Carl and Alan's wife should go together.": "\u2200x \u2200y \u2200z \u2200w (Suggested(x, y, z) \u2227 Suggested(y, w) \u2192 (Bill(x) \u2227 Frank(y) \u2227 Carl(z) \u2227 Alan(w)))", "If it was suggested that Bill and Frank's boss should go together, it was suggested that Carl and Alan's wife should go together.": "\u2200x \u2200y \u2200z \u2200w (Suggested(x, y, z) \u2227 Boss(y) \u2227 Bill(y) \u2227 Frank(y) \u2227 Suggested(x, w, z) \u2227 Boss(z) \u2227 Carl(z) \u2227 Alan(z) \u2192 Suggested(x, w, z))", "If it was suggested that Bill and Frank's boss should go together, it was suggested that Carl and Alan should go together.": "\u2200x \u2200y \u2200z \u2200w (Suggested(x, y, z) \u2227 Boss(y) \u2227 Bill(x) \u2227 Frank(y) \u2192 Suggested(w, z, Alan) \u2227 Carl(w) \u2227 Boss(z))", "If it was suggested that Bill, Frank and Frank's boss should go together, it was suggested that Carl, Alan and Alan's wife should go together.": "\u2200x \u2200y \u2200z (Suggested(x, y, z) \u2227 Bill(x) \u2227 Frank(y) \u2227 FrankBoss(z) \u2192 Suggested(Carl, Alan, AlanWife))", "There was one auditor who signed all the reports.": "\u2203x (Auditor(x) \u2227 SignedAllReports(x))", "A lawyer signed every report, and so did an auditor.": "\u2200x\u2200y (Lawyer(x) \u2227 Auditor(y) \u2192 (SignedReport(x) \u2227 SignedReport(y)))", "That is, there was one lawyer who signed all the reports.": "\u2203x (Lawyer(x) \u2227 SignedAllReports(x))", "John has a diamond.": "HasDiamond(john)", "John has a genuine diamond.": "\u2200x (Diamond(x) \u2227 Genuine(x) \u2192 OwnedBy(x, John))", "John is a university student.": "UniversityStudent(john)", "John is a former university student.": "FormerStudent(john)", "John is successful.": "Successful(john)", "John is a successful former university student.": "SuccessfulFormerStudent(john)", "John is a former successful university student.": "FormerSuccessfulStudent(john)", "Every four-legged mammal is a four-legged animal.": "\u2200x (FourLeggedMammal(x) \u2192 FourLeggedAnimal(x))", "Every mammal is an animal.": "\u2200x (Mammal(x) \u2192 Animal(x))", "Dumbo is four-legged.": "FourLegged(dumbo)", "Dumbo is a four-legged animal.": "FourLeggedAnimal(dumbo)", "Mickey is a large animal.": "LargeAnimal(mickey)", "Mickey is a small animal.": "\u2200x (Animal(x) \u2227 Small(x) \u2192 Mickey(x))", "Dumbo is a small animal.": "SmallAnimal(dumbo)", "Dumbo is a large animal.": "LargeAnimal(dumbo)", "Fido is a large animal.": "LargeAnimal(fido)", "Fido is not a small animal.": "\u2200x (Animal(x) \u2227 Small(x) \u2192 \u00acFido(x))", "Fido is a small animal.": "SmallAnimal(fido)", "Fido is not a large animal.": "\u2200x (Animal(x) \u2227 Large(x) \u2192 \u00acFido(x))", "Mickey is smaller than Dumbo.": "Smaller(Mickey, Dumbo)", "Mickey is larger than Dumbo.": "Larger(Mickey, Dumbo)", "All mice are small animals.": "\u2200x (Mouse(x) \u2192 SmallAnimal(x))", "Mickey is a large mouse.": "LargeMouse(mickey)", "All elephants are large animals.": "\u2200x (Elephant(x) \u2192 LargeAnimal(x))", "Dumbo is a small elephant.": "SmallElephant(dumbo)", "Dumbo is larger than Mickey.": "Larger(Dumbo, Mickey)", "Mickey is small.": "\u2200x (Mouse(x) \u2192 Small(x))", "All fat legal authorities are fat law lecturers.": "\u2200x (FatLegalAuthority(x) \u2192 FatLawLecturer(x))", "All legal authorities are law lecturers.": "\u2200x (LegalAuthority(x) \u2192 LawLecturer(x))", "All law lecturers are legal authorities.": "\u2200x (LawLecturer(x) \u2192 LegalAuthority(x))", "All competent legal authorities are competent law lecturers.": "\u2200x (CompetentLegalAuthority(x) \u2192 LawLecturer(x))", "John is fatter than Bill.": "Fatter(john, bill)", "John is a fatter politician than Bill.": "Fatter(john, bill)", "John is cleverer than Bill.": "Cleverer(john, bill)", "John is a cleverer politician than Bill.": "Cleverer(John, Bill)", "Kim is clever.": "Clever(kim)", "Kim is a clever person.": "Clever(Kim)", "Kim is a clever politician.": "Clever(Kim)", "The PC-6082 is fast.": "Fast(PC6082)", "The PC-6082 is faster than the ITEL-XZ.": "Faster(PC-6082, ITEL-XZ)", "The ITEL-XZ is fast.": "Fast(ITELXZ)", "The PC-6082 is slow.": "\u2200x (PC6082(x) \u2192 Slow(x))", "The PC-6082 is as fast as the ITEL-XZ.": "\u2200x\u2200y (PC6082(x) \u2227 ITELXZ(y) \u2192 AsFastAs(x, y))", "The PC-6082 is slower than the ITEL-XZ.": "\u2200x \u2200y (PC-6082(x) \u2227 ITEL-XZ(y) \u2192 SlowerThan(x, y))", "ITEL won some orders.": "\u2203x (Order(x) \u2227 Won(x, ITEL))", "ITEL won more orders than APCOM did.": "MoreOrders(ITEL, APCOM)", "APCOM won some orders.": "\u2203x (APCOM(x) \u2227 WonOrders(x))", "ITEL won at least eleven orders.": "\u2203x (Order(x) \u2227 Won(x, ITEL))", "APCOM won ten orders.": "\u2200x (APCOM(x) \u2192 WonTenOrders(x))", "ITEL won more orders than APCOM.": "MoreOrders(ITEL, APCOM)", "ITEL won the APCOM contract.": "WonAPCOMContract(ITEL)", "ITEL won more orders than the APCOM contract.": "MoreOrders(ITEL, APCOM)", "ITEL won more than one order.": "\u2203x (Order(x) \u2227 Won(ITEL, x))", "ITEL won twenty orders.": "WonOrders(ITEL, 20)", "ITEL won twice as many orders than APCOM.": "WonOrders(ITEL, 2) \u2227 WonOrders(APCOM, 1)", "ITEL won more orders than APCOM lost.": "MoreOrdersWon(ITEL, APCOM)", "APCOM lost some orders.": "\u2203x (APCOM(x) \u2227 LostOrders(x))", "APCOM lost ten orders.": "LostOrders(APCOM, 10)", "The PC-6082 is faster than the ITEL-ZX.": "Faster(PC-6082, ITEL-ZX)", "The PC-6082 is faster than 500 MIPS.": "FasterThan(PC6082, 500MIPS)", "The ITEL-ZX is slower than 500 MIPS.": "\u2200x (ITELZX(x) \u2192 SlowerThan500MIPS(x))", "ITEL sold 5500 computers.": "Sold(ITEL, 5500, Computers)", "ITEL sold 3000 more computers than APCOM.": "Sold(ITEL, 3000, Computers) \u2227 Sold(APCOM, 0, Computers)", "APCOM sold exactly 2500 computers.": "\u2200x (APCOM(x) \u2192 SoldExactly2500Computers(x))", "APCOM has a more important customer than ITEL is.": "\u2200x\u2200y (APCOM(x) \u2227 ITEL(y) \u2192 MoreImportantCustomer(x, y))", "APCOM has a more important customer than ITEL.": "\u2200x\u2200y (APCOM(x) \u2227 ITEL(y) \u2192 MoreImportantCustomer(x, y))", "APCOM has a more important customer than ITEL has.": "\u2200x\u2200y (APCOM(x) \u2227 ITEL(y) \u2192 MoreImportantCustomer(x, y))", "The PC-6082 is faster than every ITEL computer.": "\u2200x (PC-6082(x) \u2192 FasterThanEveryITEL(x))", "The ITEL-ZX is an ITEL computer.": "\u2200x (ITELZX(x) \u2192 ITELComputer(x))", "The PC-6082 is faster than some ITEL computer.": "\u2200x (PC-6082(x) \u2192 FasterThanITEL(x))", "The PC-6082 is faster than any ITEL computer.": "\u2200x (PC-6082(x) \u2192 FasterThanITEL(x))", "The PC-6082 is faster than the ITEL-ZX and the ITEL-ZY.": "\u2200x \u2200y \u2200z (PC-6082(x) \u2227 ITEL-ZX(y) \u2227 ITEL-ZY(z) \u2192 Faster(x, y, z))", "The PC-6082 is faster than the ITEL-ZX or the ITEL-ZY.": "\u2200x \u2200y \u2200z (PC-6082(x) \u2227 ITEL-ZX(y) \u2227 ITEL-ZY(z) \u2192 Faster(x, y, z))", "ITEL currently has a factory in Birmingham.": "HasFactoryIn(ITEL, Birmingham)", "ITEL has a factory in Birmingham.": "HasFactoryIn(ITEL, Birmingham)", "Itel was in Birmingham in 1993.": "\u2203x (Itel(x) \u2227 InBirmingham(x, 1993))", "Since 1992 ITEL has been in Birmingham.": "\u2200x (ITEL(x) \u2192 LocatedInBirmingham(x, 1992))", "It is now 1996.": "Year(1996)", "ITEL developed a new editor in 1993.": "\u2200x (Editor(x) \u2227 DevelopedIn(x, 1993) \u2192 ITEL(x))", "ITEL has developed a new editor since 1992.": "\u2200x (Editor(x) \u2227 DevelopedBy(x, ITEL) \u2192 Year(x, 1992))", "ITEL expanded in 1993.": "Expanded(ITEL, 1993)", "ITEL has expanded since 1992.": "Expanded(ITEL, 1992)", "ITEL made a loss in 1993.": "\u2203x (ITEL(x) \u2227 MadeLoss(x, 1993))", "Since 1992 ITEL has made a loss.": "\u2200x (ITEL(x) \u2227 Year(y) \u2227 Year(z) \u2227 Year(w) \u2192 (MadeLoss(x, y, z, w)) \u2227 (Year(y) \u2227 Year(z) \u2227 Year(w) \u2227 MadeLoss(x, y, z, w)))", "ITEL has made a loss since 1992.": "\u2200x (ITEL(x) \u2192 MadeLossSince(x, 1992))", "ITEL existed in 1992.": "Existed(ITEL, 1992)", "In March 1993 APCOM founded ITEL.": "\u2200x\u2200y (March(x) \u2227 1993(x) \u2227 APCOM(y) \u2192 FoundedITEL(y))", "The conference was over on July 8th, 1994.": "Conference(conference) \u2227 Over(conference, july8th1994)", "The conference started on July 4th, 1994.": "StartedOn(Conference, 1994, 7, 4)", "It lasted 2 days.": "Lasted(x, 2)", "APCOM signed the contract Friday, 13th.": "SignedContract(APCOM, Friday, 13th)", "Yesterday APCOM signed the contract.": "ContractSigned(APCOM, yesterday)", "Today is Saturday, July 14th.": "Saturday(today) \u2227 July(month) \u2227 14(day)", "Smith left before Anderson left.": "LeftBefore(Smith, Anderson)", "Smith left before Jones left.": "LeftBefore(smith, jones)", "Jones left before Anderson left.": "LeftBefore(jones, anderson)", "Smith left after Anderson left.": "\u2200x \u2200y (Smith(x) \u2227 Anderson(y) \u2192 LeftAfter(x, y))", "Smith left after Jones left.": "\u2200x \u2200y (Smith(x) \u2227 Jones(y) \u2192 LeftAfter(x, y))", "Jones left after Anderson left.": "Left(jones) \u2227 Left(anderson)", "Smith was present after Anderson was present.": "\u2200x \u2200y (Smith(x) \u2227 Anderson(y) \u2192 PresentAfter(x, y))", "Smith was present after Jones left.": "\u2200x \u2200y (Present(x) \u2227 Left(y) \u2192 After(x, y))", "Jones left after Anderson was present.": "Left(jones) \u2227 Present(anderson) \u2192 LeftAfter(jones, anderson)", "Jones left after Smith left.": "Left(jones) \u2227 Left(smith) \u2227 LeftAfter(smith, jones)", "Smith left.": "\u2203x (Person(x) \u2227 Left(x, Smith))", "Jones left.": "Left(jones)", "Jones left before Smith left.": "LeftBefore(jones, smith)", "Smith revised the contract after Jones did.": "Revised(Contract, Smith) \u2227 \u00acRevised(Contract, Jones)", "Jones revised the contract.": "RevisedContract(jones, contract)", "Smith revised the contract.": "RevisedContract(smith, contract)", "Jones revised the contract before Smith did.": "Revised(Jones, Contract) \u2227 \u00acRevised(Smith, Contract)", "Smith revised the contract before Jones did.": "RevisedContract(smith) \u2227 RevisedContract(jones) \u2227 Before(smith, jones)", "Jones revised the contract after Smith did.": "Revised(jones, contract) \u2227 Revised(smith, contract) \u2227 \u00acSimultaneous(jones, smith, contract)", "Jones swam after Smith swam.": "\u2200x \u2200y (Jones(x) \u2227 Smith(y) \u2192 SwamAfter(x, y))", "Smith swam.": "\u2203x (Swimmer(x) \u2227 Swam(x, smith))", "Jones swam.": "Swam(jones)", "Smith swam before Jones swam.": "\u2200x\u2200y (Smith(x) \u2227 Jones(y) \u2192 SwamBefore(x, y))", "Jones swam to the shore after Smith swam to the shore.": "\u2200x\u2200y (Jones(x) \u2227 Smith(y) \u2192 (SwamToShore(x) \u2227 SwamToShore(y)))", "Smith swam to the shore.": "\u2200x (Smith(x) \u2192 SwamToShore(x))", "Jones swam to the shore.": "\u2200x (Jones(x) \u2192 SwamToShore(x))", "Smith swam to the shore before Jones swam to the shore.": "\u2200x\u2200y (Smith(x) \u2227 Jones(y) \u2192 SwamToShoreBefore(x, y))", "Jones was present before Smith was present.": "\u2200x \u2200y (Present(x) \u2227 Present(y) \u2192 Before(x, y))", "Smith was present.": "\u2203x (Present(x) \u2227 Smith(x))", "Jones was present.": "\u2203x (Present(x) \u2227 Person(x) \u2227 Name(x, \"Jones\"))", "Smith was present after Jones was present.": "\u2200x \u2200y (Present(x) \u2227 Present(y) \u2192 (Present(x) \u2227 \u00acPresent(y) \u2228 (Present(y) \u2227 \u00acPresent(x))))", "Jones was present after Smith was present.": "\u2200x \u2200y (Present(x) \u2227 Present(y) \u2192 PresentAfter(x, y))", "Smith was present before Jones was present.": "\u2200x \u2200y (Smith(x) \u2227 Jones(y) \u2192 PresentBefore(x, y))", "Jones was writing a report after Smith was writing a report.": "WasWritingReport(jones) \u2227 WasWritingReport(smith)", "Smith was writing a report.": "\u2203x (Report(x) \u2227 Writer(x, Smith))", "Jones was writing a report.": "\u2203x (Person(x) \u2227 Report(x) \u2227 Writing(x))", "Smith was writing a report before Jones was writing a report.": "\u2200x\u2200y (Smith(x) \u2227 Report(x) \u2227 Jones(y) \u2227 Report(y) \u2192 \u2203z (Writing(z) \u2227 Before(z, x) \u2227 Writing(z, y)))", "Jones was writing a report before Smith was writing a report.": "\u2200x\u2200y (WritingReport(x) \u2227 WritingReport(y) \u2192 (WritingReportBefore(x, y)))", "Smith was writing a report after Jones was writing a report.": "WritingReport(Smith) \u2227 WritingReport(Jones)", "Smith lost his temper.": "LostTemper(Smith)", "Smith left the meeting before he lost his temper.": "LeftMeeting(smith) \u2227 \u00acLostTemper(smith)", "NaN": "Nan(x) \u2194 \u00ac\u2203y (Person(y) \u2227 Age(y, x))", "When they opened the M25, traffic increased.": "\u2200x (OpenedM25(x) \u2192 IncreasedTraffic(x))", "Smith lived in Birmingham in 1992.": "LivedIn(Smith, Birmingham, 1992)", "Smith lived in Birmingham in 1991.": "LivedIn(Smith, Birmingham, 1991)", "Smith wrote his first novel in 1992.": "WroteFirstNovel(smith, 1992)", "Smith wrote his first novel in 1991.": "WroteFirstNovel(smith, 1991)", "Smith wrote it in 1992.": "WroteInYear(smith, 1992)", "Smith wrote a novel in 1991.": "WroteNovel(smith, 1991)", "Smith wrote a novel in 1992.": "WroteNovel(smith, 1992)", "Smith was running it in 1992.": "Running(Smith, 1992)", "Smith was running a business in 1991.": "\u2203x (Person(x) \u2227 Business(x) \u2227 Ran(x, 1991))", "Smith discovered it in 1992.": "Discovered(Smith, 1992)", "Smith discovered a new species in 1991.": "\u2203x (DiscoveredNewSpecies(x) \u2227 Year(x, 1991))", "Smith discovered a new species in 1992.": "\u2203x (DiscoveredSpecies(x) \u2227 Year(y) \u2227 Year(z) \u2227 Year(w) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(x) \u2227 Year(", "Smith had finished writing the report by 11 am.": "FinishedWritingReport(Smith, 11am)", "Smith wrote a report in two hours.": "WroteReport(smith, report, twoHours)", "Smith started writing the report at 8 am.": "WritingReport(Smith, 8am)", "Smith spent two hours writing the report.": "SpentTwoHoursWritingReport(smith)", "Smith spent more than two hours writing the report.": "SpentMoreThanTwoHoursWritingReport(smith)", "Smith wrote a report in one hour.": "WroteReport(smith, oneHour)", "Smith wrote a report.": "\u2203x (Report(x) \u2227 Wrote(Smith, x))", "Smith spent two hours discovering the new species.": "DiscoveredNewSpecies(smith, twoHours)", "Smith discovered a new species in two hours.": "DiscoveredNewSpecies(smith, twoHours)", "Smith discovered a new species.": "\u2203x \u2203y (Smith(x) \u2227 NewSpecies(y) \u2227 Discovered(x, y))", "Smith spent two hours discovering new species.": "DiscoveredNewSpecies(Smith, 2)", "Smith discovered many new species in two hours.": "\u2200x (DiscoveredNewSpecies(x, Smith) \u2192 Time(x, TwoHours))", "Smith spent two years running his own business.": "\u2203x (Person(x) \u2227 Business(y) \u2227 Owns(x, y) \u2227 RanForTwoYears(x, y))", "Smith was running his own business in two years.": "\u2200x (Smith(x) \u2192 RanOwnBusiness(x, 2))", "Smith spent more than two years running his own business.": "\u2200x (Smith(x) \u2192 RanOwnBusiness(x, y) \u2227 Years(y) \u2227 MoreThan(y, 2))", "Smith ran his own business.": "\u2203x (Person(x) \u2227 Business(y) \u2227 Owns(x, y))", "Smith owned a chain of business for two years.": "OwnedChainOfBusiness(Smith, TwoYears)", "In two years Smith owned a chain of businesses.": "\u2200x (TwoYearsAgo(x) \u2192 OwnedChainOfBusinesses(x, Smith))", "Smith owned a chain of business for more than two years.": "\u2200x (Smith(x) \u2192 OwnedChainOfBusiness(x, moreThanTwoYears))", "Smith owned a chain of business.": "\u2203x \u2203y (Smith(x) \u2227 Business(y) \u2227 Owns(x, y))", "Smith lived in Birmingham for a year.": "LivedIn(smith, birmingham, year)", "Smith lived in Birmingham for two years.": "LivedIn(Smith, Birmingham, 2)", "Smith lived in Birmingham for exactly a year.": "LivedIn(smith, birmingham, year)", "Smith lived in Birmingham.": "LivedIn(Smith, Birmingham)", "Smith ran his own business for a year.": "RanOwnBusiness(smith, year)", "Smith ran his own business for two years.": "RanOwnBusiness(smith, 2)", "Smith wrote a report for an hour.": "WroteReport(smith, hour)", "Smith wrote a report for two hours.": "WroteReport(smith, report, twoHours)", "Smith discovered a new species for an hour.": "DiscoveredNewSpecies(smith, hour)", "Smith discovered new species.": "\u2200x (DiscoveredNewSpecies(x) \u2192 Smith(x))", "Smith discovered new species for two years.": "DiscoveredNewSpecies(smith, years)", "ITEL sent a progress report in July 1994.": "SentProgressReport(ITEL, July1994)", "In 1994 ITEL sent a progress report every month.": "\u2200x (ITEL(x) \u2227 Year(y) \u2227 Month(z) \u2227 ProgressReport(r) \u2192 SentProgressReport(x, y, z, r))", "There is a representative that Smith wrote to every week.": "\u2203x (Representative(x) \u2227 WritesTo(x, Smith) \u2227 Weekly(x))", "Smith wrote to a representative every week.": "\u2200x\u2200y (Smith(x) \u2227 Representative(y) \u2192 WritesTo(x, y, Weekly))", "Smith left the house at a quarter past five.": "LeftHouse(smith, quarterpastfive)", "She took a taxi to the station and caught the first train to Luxembourg.": "\u2200x\u2200y\u2200z (Taxi(x) \u2227 Station(y) \u2227 Train(z) \u2227 Takes(x, y) \u2227 Catches(x, z) \u2192 FirstTrainToLuxembourg(z))", "Smith lost some files.": "\u2203x (Smith(x) \u2227 LostFiles(x))", "They were destroyed when her hard disk crashed.": "\u2200x (Destroyed(x) \u2194 HardDiskCrashed(x))", "Smith left the house before she took a taxi to the station.": "LeftHouse(smith) \u2227 TookTaxi(smith, station)", "Smith had left the house at a quarter past five.": "LeftHouseAtQuarterPastFive(smith)", "Then she took a taxi to the station.": "\u2200x (Taxi(x) \u2227 To(x, y) \u2227 Station(y) \u2192 Takes(x, y))", "ITEL delivered reports late in 1993.": "\u2200x (ITEL(x) \u2227 DeliveredReports(x, 1993) \u2192 Late(x, 1993))", "ITEL always delivers reports late.": "\u2200x (ITEL(x) \u2192 DeliversReportsLate(x))", "In 1993 ITEL delivered reports.": "\u2200x (ITEL(x) \u2227 Year(y) \u2227 Year(z) \u2192 DeliveredReports(x, y, z))", "ITEL never delivers reports late.": "\u2200x (ITEL(x) \u2192 \u00acDeliversReportsLate(x))", "Smith was in Paris on the 7th of May, 1995.": "Smith(x) \u2227 InParis(x, 7thOfMay1995)", "Smith arrived in Paris on the 5th of May, 1995.": "ArrivedInParis(smith, 1995, 5, may)", "Today is the 15th of May, 1995.": "Date(today, 15, 5, 1995)", "She is still in Paris.": "StillInParis(she)", "Smith had been travelling the day before she arrived in Katmandu.": "\u2200x (Smith(x) \u2227 Travelled(x, y) \u2227 DayBefore(y) \u2192 ArrivedIn(x, z) \u2227 Katmandu(z))", "When Smith arrived in Katmandu she had been travelling for three days.": "\u2200x (ArrivedInKatmandu(x) \u2192 TravelledForThreeDays(x))", "Jones was unemployed at some time before he graduated.": "\u2203x (Unemployed(x) \u2227 Jones(x) \u2227 BeforeGraduation(x))", "Jones graduated in March and has been employed ever since.": "Graduated(Jones, March) \u2227 Employed(Jones)", "Jones has been unemployed in the past.": "\u2203x (Person(x) \u2227 Unemployed(x))", "It took the representatives more than a week to read the report.": "\u2200x (Representative(x) \u2227 ReadReport(x) \u2192 MoreThanWeek(x))", "Every representative has read this report.": "\u2200x (Representative(x) \u2192 ReadReport(x))", "No two representatives have read it at the same time.": "\u00ac\u2203x\u2203y (Representative(x) \u2227 Representative(y) \u2227 Read(x, z) \u2227 Read(y, z) \u2227 SameTime(z))", "No representative took less than half a day to read the report.": "\u2200x (Representative(x) \u2227 TookLessThanHalfADay(x) \u2192 \u00acReadReport(x))", "There are sixteen representatives.": "\u2203x (Representative(x) \u2227 NumberOfRepresentatives(x, 16))", "Mary's story lasted as long as Jones's updating the program.": "LastedAsLongAs(mary, jones)", "While Jones was updating the program, Mary came in and told him about the board meeting.": "\u2200x\u2200y\u2200z (Program(x) \u2227 Jones(y) \u2227 Mary(z) \u2227 Updating(y, x) \u2227 CameIn(z, y) \u2192 ToldAboutBoardMeeting(z, y))", "She finished before he did.": "FinishedBefore(she, he)", "APCOM has been paying mortgage interest for a total of 15 years or more.": "\u2200x (APCOM(x) \u2192 (PayingMortgageInterest(x) \u2227 Years(y) \u2227 TotalYears(y) \u2227 GreaterThan(y, 15) \u2227 PayingMortgageInterest(x, y)))", "Before APCOM bought its present office building, it had been paying mortgage interest on the previous one for 8 years.": "\u2200x (APCOM(x) \u2227 PresentOfficeBuilding(x) \u2192 (\u2203y (MortgageInterest(y) \u2227 PreviousOfficeBuilding(y) \u2227 PaidFor8Years(x, y))))", "Since APCOM bought its present office building it has been paying mortgage interest on it for more than 10 years.": "\u2200x (APCOM(x) \u2227 BoughtOfficeBuilding(x) \u2192 (PayingMortgageInterest(x) \u2227 MoreThan10Years(x)))", "It is the case that Jones is not and will never be allowed to write his memoirs.": "\u2200x (Jones(x) \u2192 \u00acWritesMemoirs(x))", "When Jones got his job at the CIA, he knew that he would never be allowed to write his memoirs.": "\u2200x (Jones(x) \u2227 GotCIAJob(x) \u2192 \u00acAllowsMemoirs(x))", "Two years from now Smith will have been to Florence at least four times.": "TwoYearsFromNow(Smith) \u2227 TravelledTo(Smith, Florence) \u2227 NumberOfTimes(Smith, Florence, \u22654)", "Smith has been to Florence twice in the past.": "\u2203x (Smith(x) \u2227 HasBeenToFlorenceTwice(x))", "Smith will go to Florence twice in the coming year.": "\u2200x (Smith(x) \u2192 (GoesToFlorenceTwice(x) \u2227 Year(y) \u2227 ComingYear(y)))", "It will be the case that in a few weeks Smith will discover that she has been duped; and she will be furious.": "\u2200x (FewWeeks(x) \u2227 Smith(x) \u2192 (DiscoversDuped(x) \u2227 Furious(x)))", "Last week I already knew that when, in a month's time, Smith would discover that she had been duped she would be furious.": "\u2200x (LastWeek(x) \u2227 MonthsTime(x) \u2227 Smith(x) \u2227 DiscoveredDuped(x) \u2192 Furious(x))", "Everyone who starts gambling seriously stops the moment he is broke.": "\u2200x (Gambler(x) \u2227 SeriousGambler(x) \u2227 Broke(x) \u2192 StopsGambling(x))", "No one gambling seriously stops until he is broke.": "\u2200x (Gambler(x) \u2227 GamblingSeriously(x) \u2192 Broke(x))", "No one can gamble when he is broke.": "\u2200x (Gambler(x) \u2227 Broke(x) \u2192 \u00acCanGamble(x))", "Everyone who starts gambling seriously continues until he is broke.": "\u2200x (Gambler(x) \u2227 SeriousGambler(x) \u2192 ContinuesUntilBroke(x))", "No one who starts gambling seriously stops until he is broke.": "\u2200x (Gambler(x) \u2227 SeriousGambler(x) \u2192 \u00acStopsUntilBroke(x))", "Some people discover that they have been asleep.": "\u2203x (Person(x) \u2227 DiscoveredAsleep(x))", "Nobody who is asleep ever knows that he is asleep.": "\u2200x (Asleep(x) \u2192 \u00acKnowsThatHeIsAsleep(x))", "But some people know that they have been asleep after they have been asleep.": "\u2203x (Person(x) \u2227 Asleep(x) \u2227 \u00acKnows(x, HasBeenAsleep))", "ITEL finished MTALK in 1993.": "Finished(ITEL, MTALK, 1993)", "ITEL built MTALK in 1993.": "BuiltIn(ITEL, MTALK, 1993)", "ITEL was building MTALK in 1993.": "Building(ITEL, MTALK, 1993)", "ITEL won a contract in 1993.": "WonContract(ITEL, 1993)", "ITEL won the contract from APCOM in 1993.": "WonContract(ITEL, APCOM, 1993)", "ITEL was winning the contract from APCOM in 1993.": "WinningContract(ITEL, APCOM, 1993)", "ITEL owned APCOM in 1990.": "Owned(APCOM, ITEL, 1990)", "ITEL owned APCOM from 1988 to 1992.": "Owned(ITEL, APCOM, 1988) \u2227 Owned(ITEL, APCOM, 1989) \u2227 Owned(ITEL, APCOM, 1990) \u2227 Owned(ITEL, APCOM, 1991) \u2227 Owned(ITEL, APCOM, 1992)", "Smith left the meeting.": "LeftMeeting(smith)", "Smith and Jones left the meeting.": "\u2203x \u2203y (Smith(x) \u2227 Jones(y) \u2227 LeftMeeting(x) \u2227 LeftMeeting(y))", "Jones left the meeting.": "LeftMeeting(jones)", "There was a group of people that met.": "\u2203x\u2203y\u2203z (Person(x) \u2227 Person(y) \u2227 Person(z) \u2227 Met(x, y, z))", "Smith, Anderson and Jones met.": "Meeting(smith, anderson, jones)", "ITEL won the contract in 1992.": "WonContract(ITEL, 1992)", "Smith knew that ITEL had won the contract in 1992.": "Knew(Smith, ITEL, WonContractIn(1992))", "Smith believed that ITEL had won the contract in 1992.": "Believed(Smith, ITEL, WonContract, 1992)", "ITEL managed to win the contract in 1992.": "ManagedToWinContract(ITEL, 1992)", "ITEL tried to win the contract in 1992.": "TriedToWinContract(ITEL, 1992)", "It is true that ITEL won the contract in 1992.": "WonContract(ITEL, 1992)", "It is false that ITEL won the contract in 1992.": "\u00acWonContract(ITEL, 1992)", "Smith saw Jones' heart beat.": "\u2200x\u2200y (Smith(x) \u2227 Jones(y) \u2192 SawHeartBeat(x, y))", "Smith saw Jones sign the contract.": "Saw(Smith, Jones, Contract)", "If Jones signed the contract, his heart was beating.": "\u2200x (SignedContract(x) \u2192 BeatingHeart(x))", "When Jones signed the contract, his heart was beating.": "\u2200x (SignedContract(x, jones) \u2192 HeartBeating(jones))", "Smith saw the chairman of ITEL sign the contract.": "\u2200x\u2200y (Smith(x) \u2227 ChairmanOfITEL(y) \u2192 SawSignContract(x, y))", "Jones is the chairman of ITEL.": "Chairman(Jones, ITEL)", "There is someone whom Helen saw answer the phone.": "\u2203x (Person(x) \u2227 SeenAnswerPhone(x, Helen))", "Helen saw the chairman of the department answer the phone.": "\u2200x\u2200y (Helen(x) \u2227 ChairmanOfDepartment(y) \u2192 SawAnswerPhone(x, y))", "The chairman of the department is a person.": "\u2200x (Chairman(x) \u2192 Person(x))", "Smith saw Jones sign the contract and his secretary make a copy.": "\u2200x \u2200y \u2200z (Smith(x) \u2227 Jones(y) \u2227 Contract(z) \u2192 (Saw(x, y, z) \u2227 Secretary(x, z)))", "Smith either saw Jones sign the contract or saw Jones cross out the crucial clause.": "(SawJonesSignContract(smith) \u2295 SawJonesCrossOutClause(smith))", "Smith saw Jones sign the contract or cross out the crucial clause.": "\u2200x\u2200y\u2200z (Smith(x) \u2227 Jones(y) \u2227 Contract(z) \u2192 (SawSign(x, y, z) \u2228 CrossedOutCrucialClause(x, y, z)))"}