	nl_ps	fol_ps	nl_h	fol_h	label	e_pred	c_pred
0	An Italian became the world's greatest tenor.	exists x. (Italian(x) & WorldsGreatestTenor(x))	There was an Italian who became the world's greatest tenor.	exists x. (Italian(x) & WorldsGreatestTenor(x))	e	True	False
1	Every Italian man wants to be a great tenor. ## Some Italian men are great tenors.	exists z500. all x. ((Italian(x, z500) & Man(z500)) -> WantsToBeGreatTenor(x)) ## exists z500. exists z500. exists x. ((Italian(x, z500) & Man(z500)) & (Great(x, z500) & Tenor(z500)))	There are Italian men who want to be a great tenor.	exists z500. exists x. ((Italian(x, z500) & Man(z500)) & WantsToBeGreatTenor(x))	e	False	False
2	All Italian men want to be a great tenor. ## Some Italian men are great tenors.	exists z500. all x. ((Italian(x, z500) & Man(z500)) -> WantsToBeGreatTenor(x)) ## exists z500. exists z500. exists x. ((Italian(x, z500) & Man(z500)) & (Great(x, z500) & Tenor(z500)))	There are Italian men who want to be a great tenor.	exists z500. exists x. ((Italian(x, z500) & Man(z500)) & WantsToBeGreatTenor(x))	e	False	False
3	Each Italian tenor wants to be great. ## Some Italian tenors are great.	exists z500. all x. ((Italian(x, z500) & Tenor(z500)) -> WantsToBeGreat(x)) ## exists z500. exists x. ((Italian(x, z500) & Tenor(z500)) & Great(x))	There are Italian tenors who want to be great.	exists z500. exists x. ((Italian(x, z500) & Tenor(z500)) & WantsToBeGreat(x))	e	False	False
4	The really ambitious tenors are Italian.	all x. (Tenor(x) & Ambitious(x) -> Italian(x))	There are really ambitious tenors who are Italian.	exists x. (Tenor(x) & Ambitious(x) & Italian(x))	e	False	False
5	No really great tenors are modest.	exists z500. all x. (Tenor(x) & (Really(x, z500) & Great(z500)) -> not Modest(x))	There are really great tenors who are modest.	exists x. (Tenor(x) & Great(x) & Modest(x))	c	False	False
6	Many great tenors are German.	exists x. (Tenor(x) & Great(x) & German(x))	There are great tenors who are German.	exists x. (Tenor(x) & Great(x) & German(x))	e	True	False
7	Several great tenors are British.	exists x. (Tenor(x) & Great(x) & British(x))	There are great tenors who are British.	exists x. (Tenor(x) & Great(x) & British(x))	e	True	False
8	Few great tenors are poor.	exists z500. exists x. ((Great(x, z500) & Tenor(z500)) & Poor(x))	There are great tenors who are poor.	exists z500. exists x. ((Great(x, z500) & Tenor(z500)) & Poor(x))	n	True	False
9	Both leading tenors are excellent. ## Leading tenors who are excellent are indispensable.	exists z500. all x.all y. ((Leading(x, z500) & Tenor(z500)) & LeadingTenor(y) -> Excellent(x) & Excellent(y)) ## exists z500. all x. ((Leading(x, z500) & Tenor(z500)) & Excellent(x) -> Indispensable(x))	Both leading tenors are indispensable.	all x.all y. (Tenor(x) & Tenor(y) -> (Indispensable(x) & Indispensable(y)))	e	False	False
10	At least three tenors will take part in the concert.	exists x. (Tenor(x) & TakesPartInConcert(x))	There are tenors who will take part in the concert.	exists x. (Tenor(x) & TakesPartInConcert(x))	e	True	False
11	At most two tenors will contribute their fees to charity.	exists x.exists y. (Tenor(x) & Tenor(y) & ContributesFeesToCharity(x) & ContributesFeesToCharity(y))	There are tenors who will contribute their fees to charity.	exists x. (Tenor(x) & ContributesFeesToCharity(x))	n	True	False
12	Every European has the right to live in Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> RightToLiveInEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Every European can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
13	All Europeans have the right to live in Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> RightToLiveInEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	All Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
14	Each European has the right to live in Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> RightToLiveInEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Each European can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
15	The residents of member states have the right to live in Europe. ## All residents of member states are individuals. ## Every individual who has the right to live in Europe can travel freely within Europe.	all x. (ResidentOfMemberState(x) -> RightToLiveInEurope(x)) ## all x. (ResidentOfMemberState(x) -> Individual(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	The residents of member states can travel freely within Europe.	all x. (ResidentOfMemberState(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
16	No delegate finished the report on time.	not exists x. (Delegate(x) & FinishedReportOnTime(x))	No delegate finished the report.	exists z500. not exists x. (Delegate(x) & (Finished(x, z500) & Report(z500)))	n	False	False
17	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	Some delegates finished the survey.	exists z500. exists x. (Delegate(x) & (Finished(x, z500) & Survey(z500)))	e	False	False
18	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	Many delegates obtained results from the survey.	all x. (Delegate(x) -> ObtainedResultsFromSurvey(x))	e	False	False
19	Several delegates got the results published in major national newspapers.	exists z500. exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & (National(n, z500) & Newspaper(z500)) & Major(m) & PublishedIn(x, n, m) & PublishedIn(y, n, m) & PublishedIn(z, n, m))	Several delegates got the results published.	exists z500. exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & (Published(x, z500) & Results(z500)) & PublishedResults(y) & PublishedResults(z))	e	False	False
20	Most Europeans are resident in Europe. ## All Europeans are people. ## All people who are resident in Europe can travel freely within Europe.	all x. (European(x) -> ResidentIn(x, Europe)) ## all x. (European(x) -> Person(x)) ## all x. (Person(x) & ResidentInEurope(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	False	False
21	A few committee members are from Sweden. ## All committee members are people. ## All people who are from Sweden are from Scandinavia.	exists z500. exists z500. exists x.exists y. ((Committee(x, z500) & Member(z500)) & CommitteeMember(y) & (From(x, z500) & Sweden(z500)) & FromSweden(y)) ## exists z500. all x. ((Committee(x, z500) & Member(z500)) -> Person(x)) ## exists z500. exists z500. all x. (Person(x) & (From(x, z500) & Sweden(z500)) -> (From(x, z500) & Scandinavia(z500)))	At least a few committee members are from Scandinavia.	exists z500. exists z500. exists x. ((Committee(x, z500) & Member(z500)) & (From(x, z500) & Scandinavia(z500)))	e	False	False
22	Few committee members are from Portugal. ## All committee members are people. ## All people who are from Portugal are from southern Europe.	exists z500. exists z500. exists x. ((Committee(x, z500) & Member(z500)) & (From(x, z500) & Portugal(z500))) ## exists z500. all x. ((Committee(x, z500) & Member(z500)) -> Person(x)) ## exists z500. exists z500. all x. (Person(x) & (From(x, z500) & Portugal(z500)) -> (Southern(x, z500) & European(z500)))	There are few committee members from southern Europe.	exists z500. exists x. ((Committee(x, z500) & Member(z500)) & FromSouthernEurope(x))	n	False	False
23	Both commissioners used to be leading businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeLeadingBusinessman(x) & UsedToBeLeadingBusinessman(y)))	Both commissioners used to be businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeBusinessman(x) & UsedToBeBusinessman(y)))	e	False	False
24	At least three commissioners spend a lot of time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & (SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z)))	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	e	True	False
25	Every European can travel freely within Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Every European has the right to live in Europe.	all x. (European(x) -> RightToLiveInEurope(x))	n	False	False
26	All Europeans can travel freely within Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	All Europeans have the right to live in Europe.	all x. (European(x) -> RightToLiveInEurope(x))	n	False	False
27	Each European can travel freely within Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Each European has the right to live in Europe.	all x. (European(x) -> RightToLiveInEurope(x))	n	False	False
28	The residents of member states can travel freely within Europe. ## All residents of member states are individuals. ## Every individual who has the right to live anywhere in Europe can travel freely within Europe.	all x. (ResidentOfMemberState(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (ResidentOfMemberState(x) -> Individual(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyInEurope(x))	The residents of member states have the right to live anywhere in Europe.	all x. (ResidentOfMemberState(x) -> RightToLiveAnywhereInEurope(x))	n	False	False
29	No delegate finished the report.	exists z500. not exists x. (Delegate(x) & (Finished(x, z500) & Report(z500)))	Some delegate finished the report on time.	exists x. (Delegate(x) & FinishedReportOnTime(x))	c	False	False
30	Some delegates finished the survey.	exists z500. exists x. (Delegate(x) & (Finished(x, z500) & Survey(z500)))	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	n	False	False
31	Many delegates obtained results from the survey.	all x. (Delegate(x) -> ObtainedResultsFromSurvey(x))	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	n	False	False
32	Several delegates got the results published.	exists z500. exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & (Published(x, z500) & Results(z500)) & PublishedResults(y) & PublishedResults(z))	Several delegates got the results published in major national newspapers.	exists z500. exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & (National(n, z500) & Newspaper(z500)) & Major(m) & PublishedIn(x, n, m) & PublishedIn(y, n, m) & PublishedIn(z, n, m))	n	False	False
33	Most Europeans can travel freely within Europe. ## All Europeans are people. ## All people who are resident in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (Person(x) & ResidentInEurope(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans are resident in Europe.	all x. (European(x) -> ResidentIn(x, Europe))	n	False	False
34	A few committee members are from Scandinavia. ## All committee members are people. ## All people who are from Sweden are from Scandinavia.	exists z500. exists x.exists y.exists z. ((Committee(x, z500) & Member(z500)) & Scandinavia(y) & CommitteeMember(z) & From(x, y) & From(z, y)) ## exists z500. all x. ((Committee(x, z500) & Member(z500)) -> Person(x)) ## exists z500. exists z500. all x. (Person(x) & (From(x, z500) & Sweden(z500)) -> (From(x, z500) & Scandinavia(z500)))	At least a few committee members are from Sweden.	exists z500. exists z500. exists x. ((Committee(x, z500) & Member(z500)) & (From(x, z500) & Sweden(z500)))	n	False	False
35	Both commissioners used to be businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeBusinessman(x) & UsedToBeBusinessman(y)))	Both commissioners used to be leading businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeLeadingBusinessman(x) & UsedToBeLeadingBusinessman(y)))	n	False	False
36	Neither commissioner spends time at home.	all x. all y. (Commissioner(x) & Commissioner(y) -> not SpendsTimeAtHome(x) & not SpendsTimeAtHome(y))	One of the commissioners spends a lot of time at home.	exists x. (Commissioner(x) & SpendsTimeAtHome(x))	c	False	True
37	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	At least three commissioners spend a lot of time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & (SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z)))	n	True	False
38	A Swede won a Nobel prize. ## Every Swede is a Scandinavian.	exists x. (Swede(x) & WonNobelPrize(x)) ## all x. (Swedish(x) -> Scandinavian(x))	A Scandinavian won a Nobel prize.	exists x. (Scandinavian(x) & WonNobelPrize(x))	e	False	False
39	Every Canadian resident can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> CanTravelFreelyWithinEurope(x)) ## exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> ResidentOfNorthAmericanContinent(x))	Every resident of the North American continent can travel freely within Europe.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
40	All Canadian residents can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> CanTravelFreelyWithinEurope(x)) ## exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> ResidentOfNorthAmericanContinent(x))	All residents of the North American continent can travel freely within Europe.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
41	Each Canadian resident can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> CanTravelFreelyWithinEurope(x)) ## exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> ResidentOfNorthAmericanContinent(x))	Each resident of the North American continent can travel freely within Europe.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
42	The residents of major western countries can travel freely within Europe. ## All residents of major western countries are residents of western countries.	all x. (ResidentOfMajorWesternCountry(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (ResidentOfMajorWesternCountry(x) -> ResidentOfWesternCountry(x))	The residents of western countries have the right to live in Europe.	all x. (ResidentOfWesternCountry(x) -> RightToLiveInEurope(x))	n	False	False
43	No Scandinavian delegate finished the report on time.	exists z500. not exists x. ((Scandinavian(x, z500) & Delegate(z500)) & FinishedReportOnTime(x))	Some delegate finished the report on time.	exists x. (Delegate(x) & FinishedReportOnTime(x))	n	False	False
44	Some Irish delegates finished the survey on time.	exists z500. exists x. ((Irish(x, z500) & Delegate(z500)) & FinishedSurveyOnTime(x))	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	e	False	False
45	Many British delegates obtained interesting results from the survey.	exists z500. exists x. ((British(x, z500) & Delegate(z500)) & ObtainedInterestingResults(x))	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	n	False	False
46	Most Europeans who are resident in Europe can travel freely within Europe.	all x. (European(x) & ResidentInEurope(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
47	A few female committee members are from Scandinavia.	exists z500. exists x. (FemaleCommitteeMember(x) & (From(x, z500) & Scandinavia(z500)))	At least a few committee members are from Scandinavia.	exists z500. exists z500. exists x. ((Committee(x, z500) & Member(z500)) & (From(x, z500) & Scandinavia(z500)))	e	False	False
48	Few female committee members are from southern Europe.	exists x. (FemaleCommitteeMember(x) & FromSouthernEurope(x))	Few committee members are from southern Europe.	exists z500. exists x. ((Committee(x, z500) & Member(z500)) & FromSouthernEurope(x))	n	False	False
49	Both female commissioners used to be in business.	all x. (Commissioner(x) & Female(x) -> UsedToBeInBusiness(x))	Both commissioners used to be in business.	all x.all y. (Commissioner(x) & Commissioner(y) -> UsedToBeInBusiness(x) & UsedToBeInBusiness(y))	n	False	False
50	At least three female commissioners spend time at home.	exists z500. exists x.exists y.exists z. ((Female(x, z500) & Commissioner(z500)) & FemaleCommissioner(y) & FemaleCommissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	e	False	False
51	At most ten female commissioners spend time at home.	exists x. (Commissioner(x) & Female(x) & SpendsTimeAtHome(x, 10))	At most ten commissioners spend time at home.	exists x. (Commissioner(x) & SpendsTimeAtHome(x, 10))	n	True	False
52	A Scandinavian won a Nobel prize. ## Every Swede is a Scandinavian.	exists x. (Scandinavian(x) & WonNobelPrize(x)) ## all x. (Swedish(x) -> Scandinavian(x))	A Swede won a Nobel prize.	exists x. (Swede(x) & WonNobelPrize(x))	n	False	False
53	Every resident of the North American continent can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x)) ## exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> ResidentOfNorthAmericanContinent(x))	Every Canadian resident can travel freely within Europe.	exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> CanTravelFreelyWithinEurope(x))	e	True	False
54	All residents of the North American continent can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x)) ## exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> ResidentOfNorthAmericanContinent(x))	All Canadian residents can travel freely within Europe.	exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> CanTravelFreelyWithinEurope(x))	e	True	False
55	Each resident of the North American continent can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x)) ## exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> ResidentOfNorthAmericanContinent(x))	Each Canadian resident can travel freely within Europe.	exists z500. all x. ((Canadian(x, z500) & Resident(z500)) -> CanTravelFreelyWithinEurope(x))	e	True	False
56	The residents of western countries can travel freely within Europe. ## All residents of major western countries are residents of western countries.	all x. (ResidentOfWesternCountry(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (ResidentOfMajorWesternCountry(x) -> ResidentOfWesternCountry(x))	The residents of major western countries have the right to live in Europe.	all x. (ResidentOfMajorWesternCountry(x) -> RightToLiveInEurope(x))	e	False	False
57	No delegate finished the report on time.	not exists x. (Delegate(x) & FinishedReportOnTime(x))	Some Scandinavian delegate finished the report on time.	exists z500. exists x. ((Scandinavian(x, z500) & Delegate(z500)) & FinishedReportOnTime(x))	c	False	False
58	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	Some Irish delegates finished the survey on time.	exists z500. exists x. ((Irish(x, z500) & Delegate(z500)) & FinishedSurveyOnTime(x))	n	False	False
59	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	Many British delegates obtained interesting results from the survey.	exists z500. exists x. ((British(x, z500) & Delegate(z500)) & ObtainedInterestingResults(x))	n	False	False
60	Most Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans who are resident outside Europe can travel freely within Europe.	all x. (European(x) & ResidentOutsideEurope(x) -> CanTravelFreelyWithinEurope(x))	n	True	False
61	A few committee members are from Scandinavia.	exists z500. exists x.exists y.exists z. ((Committee(x, z500) & Member(z500)) & Scandinavia(y) & CommitteeMember(z) & From(x, y) & From(z, y))	At least a few female committee members are from Scandinavia.	exists z500. exists x. (FemaleCommitteeMember(x) & (From(x, z500) & Scandinavia(z500)))	n	False	False
62	Few committee members are from southern Europe.	exists z500. exists x. ((Committee(x, z500) & Member(z500)) & FromSouthernEurope(x))	Few female committee members are from southern Europe.	exists x. (FemaleCommitteeMember(x) & FromSouthernEurope(x))	e	False	False
63	Both commissioners used to be in business.	all x.all y. (Commissioner(x) & Commissioner(y) -> UsedToBeInBusiness(x) & UsedToBeInBusiness(y))	Both female commissioners used to be in business.	all x. (Commissioner(x) & Female(x) -> UsedToBeInBusiness(x))	n	True	False
64	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	At least three male commissioners spend time at home.	exists x. (Commissioner(x) & Male(x) & SpendsTimeAtHome(x))	n	False	False
65	At most ten commissioners spend time at home.	exists x. (Commissioner(x) & SpendsTimeAtHome(x, 10))	At most ten female commissioners spend time at home.	exists x. (Commissioner(x) & Female(x) & SpendsTimeAtHome(x, 10))	e	False	False
