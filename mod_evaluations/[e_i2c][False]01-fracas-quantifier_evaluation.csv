	nl_ps	fol_ps	nl_h	fol_h	label	e_pred	c_pred
0	An Italian became the world's greatest tenor.	exists x. (Italian(x) & WorldsGreatestTenor(x))	There was an Italian who became the world's greatest tenor.	exists x. (Italian(x) & WorldsGreatestTenor(x))	e	True	False
1	Every Italian man wants to be a great tenor. ## Some Italian men are great tenors.	all x. (ItalianMan(x) -> WantsToBeGreatTenor(x)) ## exists x. (ItalianMan(x) & GreatTenor(x))	There are Italian men who want to be a great tenor.	exists x. (ItalianMan(x) & WantsToBeGreatTenor(x))	e	True	False
2	All Italian men want to be a great tenor. ## Some Italian men are great tenors.	all x. (ItalianMan(x) -> WantsToBeGreatTenor(x)) ## exists x. (ItalianMan(x) & GreatTenor(x))	There are Italian men who want to be a great tenor.	exists x. (ItalianMan(x) & WantsToBeGreatTenor(x))	e	True	False
3	Each Italian tenor wants to be great. ## Some Italian tenors are great.	all x. (ItalianTenor(x) -> WantsToBeGreat(x)) ## exists x. (ItalianTenor(x) & Great(x))	There are Italian tenors who want to be great.	exists x. (ItalianTenor(x) & WantsToBeGreat(x))	e	True	False
4	The really ambitious tenors are Italian.	all x. (Tenor(x) & Ambitious(x) -> Italian(x))	There are really ambitious tenors who are Italian.	exists x. (Tenor(x) & Ambitious(x) & Italian(x))	e	False	False
5	No really great tenors are modest.	all x. (Tenor(x) & ReallyGreat(x) -> not Modest(x))	There are really great tenors who are modest.	exists x. (Tenor(x) & Great(x) & Modest(x))	c	False	False
6	Some great tenors are Swedish.	exists x. (GreatTenor(x) & Swedish(x))	There are great tenors who are Swedish.	exists x. (Tenor(x) & Great(x) & Swedish(x))	e	False	False
7	Many great tenors are German.	exists x. (Tenor(x) & Great(x) & German(x))	There are great tenors who are German.	exists x. (Tenor(x) & Great(x) & German(x))	e	True	False
8	Several great tenors are British.	exists x. (Tenor(x) & Great(x) & British(x))	There are great tenors who are British.	exists x. (Tenor(x) & Great(x) & British(x))	e	True	False
9	Most great tenors are Italian.	all x. (GreatTenor(x) -> Italian(x))	There are great tenors who are Italian.	exists x. (Tenor(x) & Great(x) & Italian(x))	e	False	False
10	A few great tenors sing popular music. ## Some great tenors like popular music.	exists x. (Tenor(x) & Great(x) & SingsPopularMusic(x)) ## exists x. (GreatTenor(x) & LikesPopularMusic(x))	There are great tenors who sing popular music.	exists x. (Tenor(x) & Great(x) & SingsPopularMusic(x))	e	True	False
11	Few great tenors are poor.	exists x. (GreatTenor(x) & Poor(x))	There are great tenors who are poor.	exists x. (GreatTenor(x) & Poor(x))	n	True	False
12	Both leading tenors are excellent. ## Leading tenors who are excellent are indispensable.	all x.all y. (LeadingTenor(x) & LeadingTenor(y) -> Excellent(x) & Excellent(y)) ## all x. (LeadingTenor(x) & Excellent(x) -> Indispensable(x))	Both leading tenors are indispensable.	all x.all y. (Tenor(x) & Tenor(y) -> (Indispensable(x) & Indispensable(y)))	e	False	False
13	Neither leading tenor comes cheap. ## One of the leading tenors is Pavarotti.	all x. all y. (LeadingTenor(x) & LeadingTenor(y) -> not Cheap(x) & not Cheap(y)) ## exists x. (Tenor(x) & Leading(x) & Pavarotti(x))	Pavarotti is a leading tenor who comes cheap.	LeadingTenor(pavarotti) & ComesCheap(pavarotti)	c	False	False
14	At least three tenors will take part in the concert.	exists x. (Tenor(x) & TakesPartInConcert(x))	There are tenors who will take part in the concert.	exists x. (Tenor(x) & TakesPartInConcert(x))	e	True	False
15	At most two tenors will contribute their fees to charity.	exists x.exists y. (Tenor(x) & Tenor(y) & ContributesFeesToCharity(x) & ContributesFeesToCharity(y))	There are tenors who will contribute their fees to charity.	exists x. (Tenor(x) & ContributesFeesToCharity(x))	n	True	False
16	Every European has the right to live in Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> RightToLiveInEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Every European can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
17	All Europeans have the right to live in Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> RightToLiveInEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	All Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
18	Each European has the right to live in Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> RightToLiveInEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Each European can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
19	The residents of member states have the right to live in Europe. ## All residents of member states are individuals. ## Every individual who has the right to live in Europe can travel freely within Europe.	all x. (ResidentOfMemberState(x) -> RightToLiveInEurope(x)) ## all x. (ResidentOfMemberState(x) -> Individual(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	The residents of member states can travel freely within Europe.	all x. (ResidentOfMemberState(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
20	No delegate finished the report on time.	not exists x. (Delegate(x) & FinishedReportOnTime(x))	No delegate finished the report.	not exists x. (Delegate(x) & FinishedReport(x))	n	False	False
21	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	Some delegates finished the survey.	exists x. (Delegate(x) & FinishedSurvey(x))	e	False	False
22	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	Many delegates obtained results from the survey.	all x. (Delegate(x) -> ObtainedResultsFromSurvey(x))	e	False	False
23	Several delegates got the results published in major national newspapers.	exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & NationalNewspaper(n) & Major(m) & PublishedIn(x, n, m) & PublishedIn(y, n, m) & PublishedIn(z, n, m))	Several delegates got the results published.	exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & PublishedResults(x) & PublishedResults(y) & PublishedResults(z))	e	False	False
24	Most Europeans are resident in Europe. ## All Europeans are people. ## All people who are resident in Europe can travel freely within Europe.	all x. (European(x) -> ResidentIn(x, Europe)) ## all x. (European(x) -> Person(x)) ## all x. (Person(x) & ResidentInEurope(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	False	False
25	A few committee members are from Sweden. ## All committee members are people. ## All people who are from Sweden are from Scandinavia.	exists x.exists y. (CommitteeMember(x) & CommitteeMember(y) & FromSweden(x) & FromSweden(y)) ## all x. (CommitteeMember(x) -> Person(x)) ## all x. (Person(x) & FromSweden(x) -> FromScandinavia(x))	At least a few committee members are from Scandinavia.	exists x. (CommitteeMember(x) & FromScandinavia(x))	e	True	False
26	Few committee members are from Portugal. ## All committee members are people. ## All people who are from Portugal are from southern Europe.	exists x. (CommitteeMember(x) & FromPortugal(x)) ## all x. (CommitteeMember(x) -> Person(x)) ## all x. (Person(x) & FromPortugal(x) -> SouthernEuropean(x))	There are few committee members from southern Europe.	exists x. (CommitteeMember(x) & FromSouthernEurope(x))	n	False	False
27	Both commissioners used to be leading businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeLeadingBusinessman(x) & UsedToBeLeadingBusinessman(y)))	Both commissioners used to be businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeBusinessman(x) & UsedToBeBusinessman(y)))	e	False	False
28	At least three commissioners spend a lot of time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & (SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z)))	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	e	True	False
29	Every European can travel freely within Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Every European has the right to live in Europe.	all x. (European(x) -> RightToLiveInEurope(x))	n	False	False
30	All Europeans can travel freely within Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	All Europeans have the right to live in Europe.	all x. (European(x) -> RightToLiveInEurope(x))	n	False	False
31	Each European can travel freely within Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Each European has the right to live in Europe.	all x. (European(x) -> RightToLiveInEurope(x))	n	False	False
32	The residents of member states can travel freely within Europe. ## All residents of member states are individuals. ## Every individual who has the right to live anywhere in Europe can travel freely within Europe.	all x. (ResidentOfMemberState(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (ResidentOfMemberState(x) -> Individual(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyInEurope(x))	The residents of member states have the right to live anywhere in Europe.	all x. (ResidentOfMemberState(x) -> RightToLiveAnywhereInEurope(x))	n	False	False
33	No delegate finished the report.	not exists x. (Delegate(x) & FinishedReport(x))	Some delegate finished the report on time.	exists x. (Delegate(x) & FinishedReportOnTime(x))	c	False	False
34	Some delegates finished the survey.	exists x. (Delegate(x) & FinishedSurvey(x))	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	n	False	False
35	Many delegates obtained results from the survey.	all x. (Delegate(x) -> ObtainedResultsFromSurvey(x))	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	n	False	False
36	Several delegates got the results published.	exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & PublishedResults(x) & PublishedResults(y) & PublishedResults(z))	Several delegates got the results published in major national newspapers.	exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & NationalNewspaper(n) & Major(m) & PublishedIn(x, n, m) & PublishedIn(y, n, m) & PublishedIn(z, n, m))	n	False	False
37	Most Europeans can travel freely within Europe. ## All Europeans are people. ## All people who are resident in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (Person(x) & ResidentInEurope(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans are resident in Europe.	all x. (European(x) -> ResidentIn(x, Europe))	n	False	False
38	A few committee members are from Scandinavia. ## All committee members are people. ## All people who are from Sweden are from Scandinavia.	exists x.exists y.exists z. (CommitteeMember(x) & Scandinavia(y) & CommitteeMember(z) & From(x, y) & From(z, y)) ## all x. (CommitteeMember(x) -> Person(x)) ## all x. (Person(x) & FromSweden(x) -> FromScandinavia(x))	At least a few committee members are from Sweden.	exists x. (CommitteeMember(x) & FromSweden(x))	n	False	False
39	Few committee members are from southern Europe. ## All committee members are people. ## All people who are from Portugal are from southern Europe.	exists x. (CommitteeMember(x) & FromSouthernEurope(x)) ## all x. (CommitteeMember(x) -> Person(x)) ## all x. (Person(x) & FromPortugal(x) -> SouthernEuropean(x))	There are few committee members from Portugal.	exists x. (CommitteeMember(x) & From(x, Portugal))	e	False	False
40	Both commissioners used to be businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeBusinessman(x) & UsedToBeBusinessman(y)))	Both commissioners used to be leading businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeLeadingBusinessman(x) & UsedToBeLeadingBusinessman(y)))	n	False	False
41	Neither commissioner spends time at home.	all x. all y. (Commissioner(x) & Commissioner(y) -> not SpendsTimeAtHome(x) & not SpendsTimeAtHome(y))	One of the commissioners spends a lot of time at home.	exists x. (Commissioner(x) & SpendsTimeAtHome(x))	c	False	True
42	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	At least three commissioners spend a lot of time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & (SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z)))	n	True	False
43	A Swede won a Nobel prize. ## Every Swede is a Scandinavian.	exists x. (Swede(x) & WonNobelPrize(x)) ## all x. (Swedish(x) -> Scandinavian(x))	A Scandinavian won a Nobel prize.	exists x. (Scandinavian(x) & WonNobelPrize(x))	e	False	False
44	Every Canadian resident can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (CanadianResident(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (CanadianResident(x) -> ResidentOfNorthAmericanContinent(x))	Every resident of the North American continent can travel freely within Europe.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
45	All Canadian residents can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (CanadianResident(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (CanadianResident(x) -> ResidentOfNorthAmericanContinent(x))	All residents of the North American continent can travel freely within Europe.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
46	Each Canadian resident can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (CanadianResident(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (CanadianResident(x) -> ResidentOfNorthAmericanContinent(x))	Each resident of the North American continent can travel freely within Europe.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
47	The residents of major western countries can travel freely within Europe. ## All residents of major western countries are residents of western countries.	all x. (ResidentOfMajorWesternCountry(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (ResidentOfMajorWesternCountry(x) -> ResidentOfWesternCountry(x))	The residents of western countries have the right to live in Europe.	all x. (ResidentOfWesternCountry(x) -> RightToLiveInEurope(x))	n	False	False
48	No Scandinavian delegate finished the report on time.	not exists x. (ScandinavianDelegate(x) & FinishedReportOnTime(x))	Some delegate finished the report on time.	exists x. (Delegate(x) & FinishedReportOnTime(x))	n	False	False
49	Some Irish delegates finished the survey on time.	exists x. (IrishDelegate(x) & FinishedSurveyOnTime(x))	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	e	False	False
50	Many British delegates obtained interesting results from the survey.	exists x. (BritishDelegate(x) & ObtainedInterestingResults(x))	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	n	False	False
51	Most Europeans who are resident in Europe can travel freely within Europe.	all x. (European(x) & ResidentInEurope(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
52	A few female committee members are from Scandinavia.	exists x. (FemaleCommitteeMember(x) & FromScandinavia(x))	At least a few committee members are from Scandinavia.	exists x. (CommitteeMember(x) & FromScandinavia(x))	e	False	False
53	Few female committee members are from southern Europe.	exists x. (FemaleCommitteeMember(x) & FromSouthernEurope(x))	Few committee members are from southern Europe.	exists x. (CommitteeMember(x) & FromSouthernEurope(x))	n	False	False
54	Both female commissioners used to be in business.	all x. (Commissioner(x) & Female(x) -> UsedToBeInBusiness(x))	Both commissioners used to be in business.	all x.all y. (Commissioner(x) & Commissioner(y) -> UsedToBeInBusiness(x) & UsedToBeInBusiness(y))	n	False	False
55	At least three female commissioners spend time at home.	exists x.exists y.exists z. (FemaleCommissioner(x) & FemaleCommissioner(y) & FemaleCommissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	e	False	False
56	At most ten female commissioners spend time at home.	exists x. (Commissioner(x) & Female(x) & SpendsTimeAtHome(x, 10))	At most ten commissioners spend time at home.	exists x. (Commissioner(x) & SpendsTimeAtHome(x, 10))	n	True	False
57	A Scandinavian won a Nobel prize. ## Every Swede is a Scandinavian.	exists x. (Scandinavian(x) & WonNobelPrize(x)) ## all x. (Swedish(x) -> Scandinavian(x))	A Swede won a Nobel prize.	exists x. (Swede(x) & WonNobelPrize(x))	n	False	False
58	Every resident of the North American continent can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (CanadianResident(x) -> ResidentOfNorthAmericanContinent(x))	Every Canadian resident can travel freely within Europe.	all x. (CanadianResident(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
59	All residents of the North American continent can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (CanadianResident(x) -> ResidentOfNorthAmericanContinent(x))	All Canadian residents can travel freely within Europe.	all x. (CanadianResident(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
60	Each resident of the North American continent can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (CanadianResident(x) -> ResidentOfNorthAmericanContinent(x))	Each Canadian resident can travel freely within Europe.	all x. (CanadianResident(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
61	The residents of western countries can travel freely within Europe. ## All residents of major western countries are residents of western countries.	all x. (ResidentOfWesternCountry(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (ResidentOfMajorWesternCountry(x) -> ResidentOfWesternCountry(x))	The residents of major western countries have the right to live in Europe.	all x. (ResidentOfMajorWesternCountry(x) -> RightToLiveInEurope(x))	e	False	False
62	No delegate finished the report on time.	not exists x. (Delegate(x) & FinishedReportOnTime(x))	Some Scandinavian delegate finished the report on time.	exists x. (ScandinavianDelegate(x) & FinishedReportOnTime(x))	c	False	False
63	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	Some Irish delegates finished the survey on time.	exists x. (IrishDelegate(x) & FinishedSurveyOnTime(x))	n	False	False
64	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	Many British delegates obtained interesting results from the survey.	exists x. (BritishDelegate(x) & ObtainedInterestingResults(x))	n	False	False
65	Most Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans who are resident outside Europe can travel freely within Europe.	all x. (European(x) & ResidentOutsideEurope(x) -> CanTravelFreelyWithinEurope(x))	n	True	False
66	A few committee members are from Scandinavia.	exists x.exists y.exists z. (CommitteeMember(x) & Scandinavia(y) & CommitteeMember(z) & From(x, y) & From(z, y))	At least a few female committee members are from Scandinavia.	exists x. (FemaleCommitteeMember(x) & FromScandinavia(x))	n	False	False
67	Few committee members are from southern Europe.	exists x. (CommitteeMember(x) & FromSouthernEurope(x))	Few female committee members are from southern Europe.	exists x. (FemaleCommitteeMember(x) & FromSouthernEurope(x))	e	False	False
68	Both commissioners used to be in business.	all x.all y. (Commissioner(x) & Commissioner(y) -> UsedToBeInBusiness(x) & UsedToBeInBusiness(y))	Both female commissioners used to be in business.	all x. (Commissioner(x) & Female(x) -> UsedToBeInBusiness(x))	n	True	False
69	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	At least three male commissioners spend time at home.	exists x. (Commissioner(x) & Male(x) & SpendsTimeAtHome(x))	n	False	False
70	At most ten commissioners spend time at home.	exists x. (Commissioner(x) & SpendsTimeAtHome(x, 10))	At most ten female commissioners spend time at home.	exists x. (Commissioner(x) & Female(x) & SpendsTimeAtHome(x, 10))	e	False	False
