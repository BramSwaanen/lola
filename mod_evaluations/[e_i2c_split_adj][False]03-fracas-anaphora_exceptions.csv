	nl_ps	fol_ps	nl_h	fol_h	label	exception
0	Smith attended a meeting. ## She chaired it.	Attended(smith) & Meeting(smith) ## Chaired(she, it)	Smith chaired a meeting.	Chaired(smith) & Meeting(smith)	e	"(FATAL)
%%ERROR: The following symbols are used with multiple arities: Chaired/2, Chaired/1.


Fatal error:  The following symbols are used with multiple arities: Chaired/2, Chaired/1"
1	Every committee has a chairman. ## He is appointed its members.	all x. (Committee(x) -> exists y. (Chairman(y) & ChairmanOf(y, x))) ## all x.all y. (Appoints(x, y) ↔ (Member(y) & AppointedBy(y, x)))	Every committee has a chairman appointed by members of the committee.	all x. (Committee(x) -> exists y. (Chairman(y) & AppointedByMembers(y, x)))	e	"Unexpected token: '↔'.  Expected token ')'.
all x.all y. (Appoints(x, y) ↔ (Member(y) & AppointedBy(y, x)))
                             ^"
2	ITEL has sent most of the reports Smith needs. ## They are on her desk.	all x.all y. (ITEL(x) & Smith(y) -> SentReports(x, y)) ## exists x. (Desk(x) & On(x, her))	There are some reports from ITEL on Smith's desk.	exists x. (Report(x) & From(x, ITEL) & On(x, Smith))	e	"(FATAL)
%%ERROR: The following symbols are used with multiple arities: Smith/1, Smith/0, ITEL/1, ITEL/0.


Fatal error:  The following symbols are used with multiple arities: Smith/1, Smith/0, ITEL/1, ITEL/0"
3	Two out of ten machines are missing. ## They have been removed.	exists x. (Machine(x) & Missing(x)) & exists y. (Machine(y) & Missing(y)) & exists z. (Machine(z) & Missing(z)) & exists w. (Machine(w) & Missing(w)) & exists v. (Machine(v) & Missing(v)) & exists u. (Machine(u) & Missing(u)) & exists t. (Machine(t) & ## all x. (Removed(x))	Two machines have been removed.	exists x. exists y. (Machine(x) & Machine(y) & Removed(x) & Removed(y))	e	"End of input found.  Expression expected.
exists x. (Machine(x) & Missing(x)) & exists y. (Machine(y) & Missing(y)) & exists z. (Machine(z) & Missing(z)) & exists w. (Machine(w) & Missing(w)) & exists v. (Machine(v) & Missing(v)) & exists u. (Machine(u) & Missing(u)) & exists t. (Machine(t) &
                                                                                                                                                                                                                                                           ^"
4	Two out of ten machines are missing. ## They have been removed.	exists x. (Machine(x) & Missing(x)) & exists y. (Machine(y) & Missing(y)) & exists z. (Machine(z) & Missing(z)) & exists w. (Machine(w) & Missing(w)) & exists v. (Machine(v) & Missing(v)) & exists u. (Machine(u) & Missing(u)) & exists t. (Machine(t) & ## all x. (Removed(x))	Eight machines have been removed.	exists x. (Machine(x) & Removed(x)) & exists y. (Machine(y) & Removed(y)) & exists z. (Machine(z) & Removed(z)) & exists w. (Machine(w) & Removed(w)) & exists v. (Machine(v) & Removed(v)) & exists u. (Machine(u) & Removed(u)) & exists t. (Machine(t) &	n	"End of input found.  Expression expected.
exists x. (Machine(x) & Removed(x)) & exists y. (Machine(y) & Removed(y)) & exists z. (Machine(z) & Removed(z)) & exists w. (Machine(w) & Removed(w)) & exists v. (Machine(v) & Removed(v)) & exists u. (Machine(u) & Removed(u)) & exists t. (Machine(t) &
                                                                                                                                                                                                                                                           ^"
5	Two out of ten machines are missing. ## They were all here yesterday.	exists x. (Machine(x) & Missing(x)) & exists y. (Machine(y) & Missing(y)) & exists z. (Machine(z) & Missing(z)) & exists w. (Machine(w) & Missing(w)) & exists v. (Machine(v) & Missing(v)) & exists u. (Machine(u) & Missing(u)) & exists t. (Machine(t) & ## all x. (Person(x) -> exists y. (Yesterday(y) & Here(x, y)))	Ten machines were here yesterday.	exists x. (Machine(x) & Here(x, yest) & Machine(x) & Yesterday(yest))	e	"End of input found.  Expression expected.
exists x. (Machine(x) & Missing(x)) & exists y. (Machine(y) & Missing(y)) & exists z. (Machine(z) & Missing(z)) & exists w. (Machine(w) & Missing(w)) & exists v. (Machine(v) & Missing(v)) & exists u. (Machine(u) & Missing(u)) & exists t. (Machine(t) &
                                                                                                                                                                                                                                                           ^"
6	John and his colleagues went to a meeting. ## They hated it.	all x.all y. (John(x) & Colleague(y) -> WentToMeeting(x, y)) ## all x. (Hated(x) ↔ (They(x) & Hated(x)))	John's colleagues hated the meeting.	all x. (Colleague(x) & Meeting(m) & Attended(x, m) -> Hated(x, m))	e	"Unexpected token: '↔'.  Expected token ')'.
all x. (Hated(x) ↔ (They(x) & Hated(x)))
                 ^"
7	John and his colleagues went to a meeting. ## They hated it.	all x.all y. (John(x) & Colleague(y) -> WentToMeeting(x, y)) ## all x. (Hated(x) ↔ (They(x) & Hated(x)))	John hated the meeting.	Hated(john, meeting)	e	"Unexpected token: '↔'.  Expected token ')'.
all x. (Hated(x) ↔ (They(x) & Hated(x)))
                 ^"
8	John and his colleagues went to a meeting. ## They hated it.	all x.all y. (John(x) & Colleague(y) -> WentToMeeting(x, y)) ## all x. (Hated(x) ↔ (They(x) & Hated(x)))	John hated the meeting.	Hated(john, meeting)	n	"Unexpected token: '↔'.  Expected token ')'.
all x. (Hated(x) ↔ (They(x) & Hated(x)))
                 ^"
9	Each department has a dedicated line. ## They rent them from BT.	all x. (Department(x) -> HasDedicatedLine(x)) ## all x.all y. (RentFrom(x, y) ↔ (Rent(x, y) & From(y, BT)))	Every department rents a line from BT.	all x. (Department(x) -> RentsLineFromBT(x))	e	"Unexpected token: '↔'.  Expected token ')'.
all x.all y. (RentFrom(x, y) ↔ (Rent(x, y) & From(y, BT)))
                             ^"
10	There are 100 companies. ## ICM is one of the companies and owns 150 computers. ## It does not have service contracts for any of its computers. ## Each of the other 99 companies owns one computer. ## They have service contracts for them.	exists x. (Company(x) & NumberOfCompanies(x, 100)) ## all x. (ICM(x) -> (Company(x) & OwnsComputers(x, 150))) ## all x. (Computer(x) -> not HasServiceContracts(x)) ## all x. (OtherCompany(x) & ≠ 100 & ≠ 0 & ≠ 1 -> OwnsOneComputer(x)) ## all x. (Service(x) & Contract(x) -> Have(x))	Most companies that own a computer have a service contract for it.	all x. (Company(x) & Owns(x) & Computer(x) -> HasServiceContract(x))	e	"Unexpected token: '100'.  Expected token ')'.
all x. (OtherCompany(x) & ≠ 100 & ≠ 0 & ≠ 1 -> OwnsOneComputer(x))
                            ^"
11	Every report has a cover page. ## R-95-103 is a report. ## Smith signed the cover page.	all x. (Report(x) -> HasCoverPage(x)) ## all x. (Report(x) ↔ R_95_103(x)) ## SignedCoverPage(Smith)	Smith signed the cover page of R-95-103.	SignedCoverPage(smith, r95103)	e	"Unexpected token: '↔'.  Expected token ')'.
all x. (Report(x) ↔ R_95_103(x))
                  ^"
12	John said Bill had hurt himself.	Said(john, Bill, hurt)	Someone said John had been hurt.	exists x. (Person(x) & Said(x, John) & Hurt(x, John))	n	"(FATAL)
%%ERROR: The following symbols are used with multiple arities: Said/3, Said/2.


Fatal error:  The following symbols are used with multiple arities: Said/3, Said/2"
