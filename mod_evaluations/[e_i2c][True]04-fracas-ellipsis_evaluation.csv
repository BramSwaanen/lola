	nl_ps	fol_ps	nl_h	fol_h	label	e_pred	c_pred
0	John spoke to Mary. ## So did Bill.	exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y)) ## DidBill(bill)	Bill spoke to Mary.	exists x. exists y. (Bill(x) & Mary(y) & SpokeTo(x, y))	e	False	False
1	John spoke to Mary. ## So did Bill. ## John spoke to Mary at four o'clock.	exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y)) ## DidBill(bill) ## SpokeTo(john, mary, fourOclock)	Bill spoke to Mary at four o'clock.	exists x. exists y. exists z. (Bill(x) & Mary(y) & FourOclock(z) & SpokenAt(x, y, z))	n	False	False
2	John spoke to Mary at four o'clock. ## So did Bill.	SpokeTo(john, mary, fourOclock) ## DidBill(bill)	Bill spoke to Mary at four o'clock.	exists x. exists y. exists z. (Bill(x) & Mary(y) & FourOclock(z) & SpokenAt(x, y, z))	e	False	False
3	John spoke to Mary at four o'clock. ## And Bill did at five o'clock.	SpokeTo(john, mary, fourOclock) ## all x. (Bill(x) & Time(x, 5) -> DidAt(x, 5))	Bill spoke to Mary at five o'clock.	exists x. exists y. exists z. (Bill(x) & Mary(y) & FiveOclock(z) & SpokeAt(x, y, z))	e	False	False
4	John has spoken to Mary. ## Bill is going to.	HasSpoken(john, mary) ## GoingTo(bill)	Bill will speak to Mary.	SpeakTo(bill, mary)	e	False	False
5	John spoke to Mary on Monday. ## Bill didn't.	SpokeTo(john, mary, monday) ## not Bill(x)	Bill spoke to Mary on Monday.	SpokeTo(bill, mary, monday)	c	False	False
6	Has John spoken to Mary? ## Bill has.	exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y)) ## Has(bill)	Bill has spoken to Mary.	exists x. exists y. (Bill(x) & Mary(y) & SpokenTo(x, y))	e	False	False
7	John has spoken to Mary. ## The students have too.	HasSpoken(john, mary) ## all x. (Student(x) -> Too(x))	The students have spoken to Mary.	all x.all y. (Student(x) & Mary(y) -> SpokenTo(x, y))	e	False	False
8	John is going to Paris by car, and the students by train.	all x. all y. (John(x) & Paris(y) -> GoesByCar(x, y)) & (Students(x) & Train(y) -> GoesByTrain(x, y))	The students are going to Paris by train.	all x. (Student(x) -> GoingToParisByTrain(x))	e	False	False
9	John owns a car. ## Bill owns one too.	OwnsCar(john) ## exists x. (Person(x) & Owns(x, 1))	Bill owns a car.	OwnsCar(bill)	e	False	False
10	John owns a car. ## Bill owns one too.	OwnsCar(john) ## exists x. (Person(x) & Owns(x, 1))	There is a car that John and Bill own.	exists x. (Car(x) & OwnedBy(x, John) & OwnedBy(x, Bill))	n	False	False
11	John had his paper accepted. ## Bill doesn't know why.	HadPaperAccepted(john) ## not (exists x. (Person(x) & Knows(x, y) & Why(y)))	Bill knows why John had his paper accepted.	KnowsWhy(Bill, John, PaperAccepted)	c	False	False
12	John spoke to Mary. ## And to Sue.	"exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y)) ## all x. (Person(x) & Name(x, ""Sue"") -> Person(x))"	John spoke to Sue.	SpokeTo(john, sue)	e	False	False
13	John spoke to Mary. ## On Friday.	exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y)) ## Friday(x)	John spoke to Mary on Friday.	SpokeTo(john, mary, friday)	e	False	False
14	John spoke to Mary on Thursday. ## And on Friday.	SpokeTo(john, mary, thursday) ## all x. (Friday(x) -> OnFriday(x))	John spoke to Mary on Friday.	SpokeTo(john, mary, friday)	e	False	False
15	Twenty men work in the Sales Department. ## But only one woman.	exists x. (Man(x) & WorksInSalesDepartment(x)) ## exists x. (Woman(x) & not exists y. (Woman(y) & not Woman(z) & Man(z) & DifferentFrom(y, z)))	Two women work in the Sales Department.	exists x. exists y. (Woman(x) & Woman(y) & WorkInSalesDepartment(x) & WorkInSalesDepartment(y))	c	False	False
16	John wants to know how many men work part time. ## And women.	WantsToKnow(John, NumberOfPartTimeMen) ## all x. (Woman(x))	John wants to know how many women work part time.	WantsToKnow(John, NumberOfWomenWorkingPartTime)	e	False	False
17	John wants to know how many men work part time, and which.	all x. (Man(x) & PartTime(x) -> WantsToKnow(John, x))	John wants to know which men work part time.	all x. (Man(x) & PartTime(x) -> WantsToKnow(John, x))	e	True	False
18	Bill spoke to everyone that John did. ## John spoke to Mary.	all x. all y. (Bill(x) & John(y) -> SpokeTo(x, y)) ## exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y))	Bill spoke to Mary.	exists x. exists y. (Bill(x) & Mary(y) & SpokeTo(x, y))	e	False	False
19	Bill spoke to everyone that John did. ## Bill spoke to Mary.	all x. all y. (Bill(x) & John(y) -> SpokeTo(x, y)) ## exists x. exists y. (Bill(x) & Mary(y) & SpokeTo(x, y))	John spoke to Mary.	exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y))	n	False	False
20	John wanted to buy a car, and he did.	WantedToBuyCar(john) & BoughtCar(john)	John bought a car.	exists x. (Car(x) & BoughtBy(x, John))	e	False	False
21	John needed to buy a car, and Bill did.	all x.all y. (NeededToBuyCar(x) & NeededToBuyCar(y) -> (John(x) & Bill(y)))	Bill bought a car.	exists x. exists y. (Bill(x) & Car(y) & Bought(x, y))	n	False	False
22	Smith claimed he had costed his proposal and so did Jones.	all x. all y. (Smith(x) & Jones(y) -> (CostedProposal(x) & CostedProposal(y)))	Jones claimed he had costed his own proposal.	ClaimedCostedProposal(jones)	e	False	False
23	Smith claimed he had costed his proposal and so did Jones.	all x. all y. (Smith(x) & Jones(y) -> (CostedProposal(x) & CostedProposal(y)))	Jones claimed he had costed Smith's proposal.	ClaimedCosted(jones, smith)	e	False	False
24	Smith claimed he had costed his proposal and so did Jones.	all x. all y. (Smith(x) & Jones(y) -> (CostedProposal(x) & CostedProposal(y)))	Jones claimed Smith had costed Smith's proposal.	ClaimedCosted(jones, smith, proposal)	e	False	False
25	Smith claimed he had costed his proposal and so did Jones.	all x. all y. (Smith(x) & Jones(y) -> (CostedProposal(x) & CostedProposal(y)))	Jones claimed Smith had costed Jones' proposal.	ClaimedCosted(jones, smith, proposal)	n	False	False
26	John is a man and Mary is a woman. ## John represents his company and so does Mary.	all x. all y. (Man(x) & Woman(y) -> (John(x) & Mary(y))) ## all x.all y. (John(x) & Mary(y) -> (RepresentsCompany(x) & RepresentsCompany(y)))	Mary represents her own company.	RepresentsOwnCompany(mary)	e	False	False
27	Bill suggested to Frank's boss that they should go to the meeting together, and Carl to Alan's wife.	all x.all y.all z. (Bill(x) & Frank(y) & Alan(z) -> (SuggestedTo(x, y, z) & not SuggestedTo(x, z, y)))	If it was suggested that Bill and Frank should go together, it was suggested that Carl and Alan should go together.	all x. all y. all z. all w. (Suggested(x, y, z) & Suggested(y, w, z) -> (Bill(x) & Frank(y) & Carl(w) & Alan(z)))	e	False	False
28	Bill suggested to Frank's boss that they should go to the meeting together, and Carl to Alan's wife.	all x.all y.all z. (Bill(x) & Frank(y) & Alan(z) -> (SuggestedTo(x, y, z) & not SuggestedTo(x, z, y)))	If it was suggested that Bill and Frank's boss should go together, it was suggested that Carl and Alan's wife should go together.	all x. all y. all z. all w. (Suggested(x, y, z) & Boss(y) & Bill(y) & Frank(y) & Suggested(x, w, z) & Boss(z) & Carl(z) & Alan(z) -> Suggested(x, w, z))	e	True	False
29	A lawyer signed every report, and so did an auditor. ## That is, there was one lawyer who signed all the reports.	all x.all y. (Lawyer(x) & Auditor(y) -> (SignedReport(x) & SignedReport(y))) ## exists x. (Lawyer(x) & SignedAllReports(x))	There was one auditor who signed all the reports.	exists x. (Auditor(x) & SignedAllReports(x))	e	False	False
