	nl_ps	fol_ps	nl_h	fol_h	label	e_pred	c_pred
0	An Italian became the world's greatest tenor.	exists x. (Italian(x) & WorldsGreatestTenor(x))	There was an Italian who became the world's greatest tenor.	exists x. (Italian(x) & WorldsGreatestTenor(x))	e	True	False
1	Every Italian man wants to be a great tenor. ## Some Italian men are great tenors.	all x. (Italian(x) & Man(x) -> WantsToBeGreatTenor(x)) ## exists x. (Italian(x) & Man(x) & Great(x) & Tenor(x))	There are Italian men who want to be a great tenor.	exists x. (Italian(x) & Man(x) & WantsToBeGreatTenor(x))	e	True	False
2	All Italian men want to be a great tenor. ## Some Italian men are great tenors.	all x. (Italian(x) & Man(x) -> WantsToBeGreatTenor(x)) ## exists x. (Italian(x) & Man(x) & Great(x) & Tenor(x))	There are Italian men who want to be a great tenor.	exists x. (Italian(x) & Man(x) & WantsToBeGreatTenor(x))	e	True	False
3	Each Italian tenor wants to be great. ## Some Italian tenors are great.	all x. (Italian(x) & Tenor(x) -> WantsToBeGreat(x)) ## exists x. (Italian(x) & Tenor(x) & Great(x))	There are Italian tenors who want to be great.	exists x. (Italian(x) & Tenor(x) & WantsToBeGreat(x))	e	True	False
4	The really ambitious tenors are Italian.	all x. (Tenor(x) & Ambitious(x) -> Italian(x))	There are really ambitious tenors who are Italian.	exists x. (Tenor(x) & Ambitious(x) & Italian(x))	e	False	False
5	No really great tenors are modest.	all x. (Tenor(x) & Really(x) & Great(x) -> not Modest(x))	There are really great tenors who are modest.	exists x. (Tenor(x) & Great(x) & Modest(x))	c	False	False
6	Some great tenors are Swedish.	exists x. (Great(x) & Tenor(x) & Swedish(x))	There are great tenors who are Swedish.	exists x. (Tenor(x) & Great(x) & Swedish(x))	e	True	False
7	Many great tenors are German.	exists x. (Tenor(x) & Great(x) & German(x))	There are great tenors who are German.	exists x. (Tenor(x) & Great(x) & German(x))	e	True	False
8	Several great tenors are British.	exists x. (Tenor(x) & Great(x) & British(x))	There are great tenors who are British.	exists x. (Tenor(x) & Great(x) & British(x))	e	True	False
9	Most great tenors are Italian.	all x. (Great(x) & Tenor(x) -> Italian(x))	There are great tenors who are Italian.	exists x. (Tenor(x) & Great(x) & Italian(x))	e	False	False
10	A few great tenors sing popular music. ## Some great tenors like popular music.	exists x. (Tenor(x) & Great(x) & SingsPopularMusic(x)) ## exists x. (Great(x) & Tenor(x) & LikesPopularMusic(x))	There are great tenors who sing popular music.	exists x. (Tenor(x) & Great(x) & SingsPopularMusic(x))	e	True	False
11	Few great tenors are poor.	exists x. (Great(x) & Tenor(x) & Poor(x))	There are great tenors who are poor.	exists x. (Great(x) & Tenor(x) & Poor(x))	n	True	False
12	Both leading tenors are excellent. ## Leading tenors who are excellent are indispensable.	all x.all y. (Leading(x) & Tenor(x) & LeadingTenor(y) -> Excellent(x) & Excellent(y)) ## all x. (Leading(x) & Tenor(x) & Excellent(x) -> Indispensable(x))	Both leading tenors are indispensable.	all x.all y. (Tenor(x) & Tenor(y) -> (Indispensable(x) & Indispensable(y)))	e	False	False
13	Neither leading tenor comes cheap. ## One of the leading tenors is Pavarotti.	all x. all y. (Leading(x) & Tenor(x) & LeadingTenor(y) -> not Cheap(x) & not Cheap(y)) ## exists x. (Tenor(x) & Leading(x) & Pavarotti(x))	Pavarotti is a leading tenor who comes cheap.	Leading(pavarotti) & Tenor(pavarotti) & Comes(pavarotti) & Cheap(pavarotti)	c	False	False
14	At least three tenors will take part in the concert.	exists x. (Tenor(x) & TakesPartInConcert(x))	There are tenors who will take part in the concert.	exists x. (Tenor(x) & TakesPartInConcert(x))	e	True	False
15	At most two tenors will contribute their fees to charity.	exists x.exists y. (Tenor(x) & Tenor(y) & ContributesFeesToCharity(x) & ContributesFeesToCharity(y))	There are tenors who will contribute their fees to charity.	exists x. (Tenor(x) & ContributesFeesToCharity(x))	n	True	False
16	Every European has the right to live in Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> RightToLiveInEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Every European can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
17	All Europeans have the right to live in Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> RightToLiveInEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	All Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
18	Each European has the right to live in Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> RightToLiveInEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Each European can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
19	The residents of member states have the right to live in Europe. ## All residents of member states are individuals. ## Every individual who has the right to live in Europe can travel freely within Europe.	all x. (ResidentOfMemberState(x) -> RightToLiveInEurope(x)) ## all x. (ResidentOfMemberState(x) -> Individual(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	The residents of member states can travel freely within Europe.	all x. (ResidentOfMemberState(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
20	No delegate finished the report on time.	not exists x. (Delegate(x) & FinishedReportOnTime(x))	No delegate finished the report.	not exists x. (Delegate(x) & Finished(x) & Report(x))	n	False	False
21	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	Some delegates finished the survey.	exists x. (Delegate(x) & Finished(x) & Survey(x))	e	False	False
22	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	Many delegates obtained results from the survey.	all x. (Delegate(x) -> ObtainedResultsFromSurvey(x))	e	False	False
23	Several delegates got the results published in major national newspapers.	exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & National(n) & Newspaper(n) & Major(m) & PublishedIn(x, n, m) & PublishedIn(y, n, m) & PublishedIn(z, n, m))	Several delegates got the results published.	exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & Published(x) & Results(x) & PublishedResults(y) & PublishedResults(z))	e	False	False
24	Most Europeans are resident in Europe. ## All Europeans are people. ## All people who are resident in Europe can travel freely within Europe.	all x. (European(x) -> ResidentIn(x, Europe)) ## all x. (European(x) -> Person(x)) ## all x. (Person(x) & ResidentInEurope(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	e	False	False
25	A few committee members are from Sweden. ## All committee members are people. ## All people who are from Sweden are from Scandinavia.	exists x.exists y. (Committee(x) & Member(x) & CommitteeMember(y) & From(x) & Sweden(x) & FromSweden(y)) ## all x. (Committee(x) & Member(x) -> Person(x)) ## all x. (Person(x) & From(x) & Sweden(x) -> From(x) & Scandinavia(x))	At least a few committee members are from Scandinavia.	exists x. (Committee(x) & Member(x) & From(x) & Scandinavia(x))	e	True	False
26	Few committee members are from Portugal. ## All committee members are people. ## All people who are from Portugal are from southern Europe.	exists x. (Committee(x) & Member(x) & From(x) & Portugal(x)) ## all x. (Committee(x) & Member(x) -> Person(x)) ## all x. (Person(x) & From(x) & Portugal(x) -> Southern(x) & European(x))	There are few committee members from southern Europe.	exists x. (Committee(x) & Member(x) & FromSouthernEurope(x))	n	False	False
27	Both commissioners used to be leading businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeLeadingBusinessman(x) & UsedToBeLeadingBusinessman(y)))	Both commissioners used to be businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeBusinessman(x) & UsedToBeBusinessman(y)))	e	False	False
28	At least three commissioners spend a lot of time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & (SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z)))	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	e	True	False
29	Every European can travel freely within Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Every European has the right to live in Europe.	all x. (European(x) -> RightToLiveInEurope(x))	n	False	False
30	All Europeans can travel freely within Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	All Europeans have the right to live in Europe.	all x. (European(x) -> RightToLiveInEurope(x))	n	False	False
31	Each European can travel freely within Europe. ## Every European is a person. ## Every person who has the right to live in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyWithinEurope(x))	Each European has the right to live in Europe.	all x. (European(x) -> RightToLiveInEurope(x))	n	False	False
32	The residents of member states can travel freely within Europe. ## All residents of member states are individuals. ## Every individual who has the right to live anywhere in Europe can travel freely within Europe.	all x. (ResidentOfMemberState(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (ResidentOfMemberState(x) -> Individual(x)) ## all x. (RightToLiveInEurope(x) -> CanTravelFreelyInEurope(x))	The residents of member states have the right to live anywhere in Europe.	all x. (ResidentOfMemberState(x) -> RightToLiveAnywhereInEurope(x))	n	False	False
33	No delegate finished the report.	not exists x. (Delegate(x) & Finished(x) & Report(x))	Some delegate finished the report on time.	exists x. (Delegate(x) & FinishedReportOnTime(x))	c	False	False
34	Some delegates finished the survey.	exists x. (Delegate(x) & Finished(x) & Survey(x))	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	n	False	False
35	Many delegates obtained results from the survey.	all x. (Delegate(x) -> ObtainedResultsFromSurvey(x))	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	n	False	False
36	Several delegates got the results published.	exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & Published(x) & Results(x) & PublishedResults(y) & PublishedResults(z))	Several delegates got the results published in major national newspapers.	exists x. exists y. exists z. (Delegate(x) & Delegate(y) & Delegate(z) & National(n) & Newspaper(n) & Major(m) & PublishedIn(x, n, m) & PublishedIn(y, n, m) & PublishedIn(z, n, m))	n	False	False
37	Most Europeans can travel freely within Europe. ## All Europeans are people. ## All people who are resident in Europe can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (European(x) -> Person(x)) ## all x. (Person(x) & ResidentInEurope(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans are resident in Europe.	all x. (European(x) -> ResidentIn(x, Europe))	n	False	False
38	Both commissioners used to be businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeBusinessman(x) & UsedToBeBusinessman(y)))	Both commissioners used to be leading businessmen.	all x.all y. (Commissioner(x) & Commissioner(y) -> (UsedToBeLeadingBusinessman(x) & UsedToBeLeadingBusinessman(y)))	n	False	False
39	Neither commissioner spends time at home.	all x. all y. (Commissioner(x) & Commissioner(y) -> not SpendsTimeAtHome(x) & not SpendsTimeAtHome(y))	One of the commissioners spends a lot of time at home.	exists x. (Commissioner(x) & SpendsTimeAtHome(x))	c	False	True
40	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	At least three commissioners spend a lot of time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & (SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z)))	n	True	False
41	A Swede won a Nobel prize. ## Every Swede is a Scandinavian.	exists x. (Swede(x) & WonNobelPrize(x)) ## all x. (Swedish(x) -> Scandinavian(x))	A Scandinavian won a Nobel prize.	exists x. (Scandinavian(x) & WonNobelPrize(x))	e	False	False
42	Every Canadian resident can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (Canadian(x) & Resident(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (Canadian(x) & Resident(x) -> ResidentOfNorthAmericanContinent(x))	Every resident of the North American continent can travel freely within Europe.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
43	All Canadian residents can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (Canadian(x) & Resident(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (Canadian(x) & Resident(x) -> ResidentOfNorthAmericanContinent(x))	All residents of the North American continent can travel freely within Europe.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
44	Each Canadian resident can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (Canadian(x) & Resident(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (Canadian(x) & Resident(x) -> ResidentOfNorthAmericanContinent(x))	Each resident of the North American continent can travel freely within Europe.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
45	The residents of major western countries can travel freely within Europe. ## All residents of major western countries are residents of western countries.	all x. (ResidentOfMajorWesternCountry(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (ResidentOfMajorWesternCountry(x) -> ResidentOfWesternCountry(x))	The residents of western countries have the right to live in Europe.	all x. (ResidentOfWesternCountry(x) -> RightToLiveInEurope(x))	n	False	False
46	No Scandinavian delegate finished the report on time.	not exists x. (Scandinavian(x) & Delegate(x) & FinishedReportOnTime(x))	Some delegate finished the report on time.	exists x. (Delegate(x) & FinishedReportOnTime(x))	n	False	False
47	Some Irish delegates finished the survey on time.	exists x. (Irish(x) & Delegate(x) & FinishedSurveyOnTime(x))	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	e	True	False
48	Many British delegates obtained interesting results from the survey.	exists x. (British(x) & Delegate(x) & ObtainedInterestingResults(x))	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	n	False	False
49	Most Europeans who are resident in Europe can travel freely within Europe.	all x. (European(x) & ResidentInEurope(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	n	False	False
50	A few female committee members are from Scandinavia.	exists x. (FemaleCommitteeMember(x) & From(x) & Scandinavia(x))	At least a few committee members are from Scandinavia.	exists x. (Committee(x) & Member(x) & From(x) & Scandinavia(x))	e	False	False
51	Few female committee members are from southern Europe.	exists x. (FemaleCommitteeMember(x) & FromSouthernEurope(x))	Few committee members are from southern Europe.	exists x. (Committee(x) & Member(x) & FromSouthernEurope(x))	n	False	False
52	Both female commissioners used to be in business.	all x. (Commissioner(x) & Female(x) -> UsedToBeInBusiness(x))	Both commissioners used to be in business.	all x.all y. (Commissioner(x) & Commissioner(y) -> UsedToBeInBusiness(x) & UsedToBeInBusiness(y))	n	False	False
53	At least three female commissioners spend time at home.	exists x.exists y.exists z. (Female(x) & Commissioner(x) & FemaleCommissioner(y) & FemaleCommissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	e	True	False
54	At most ten female commissioners spend time at home.	exists x. (Commissioner(x) & Female(x) & SpendsTimeAtHome(x, 10))	At most ten commissioners spend time at home.	exists x. (Commissioner(x) & SpendsTimeAtHome(x, 10))	n	True	False
55	A Scandinavian won a Nobel prize. ## Every Swede is a Scandinavian.	exists x. (Scandinavian(x) & WonNobelPrize(x)) ## all x. (Swedish(x) -> Scandinavian(x))	A Swede won a Nobel prize.	exists x. (Swede(x) & WonNobelPrize(x))	n	False	False
56	Every resident of the North American continent can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (Canadian(x) & Resident(x) -> ResidentOfNorthAmericanContinent(x))	Every Canadian resident can travel freely within Europe.	all x. (Canadian(x) & Resident(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
57	All residents of the North American continent can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (Canadian(x) & Resident(x) -> ResidentOfNorthAmericanContinent(x))	All Canadian residents can travel freely within Europe.	all x. (Canadian(x) & Resident(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
58	Each resident of the North American continent can travel freely within Europe. ## Every Canadian resident is a resident of the North American continent.	all x. (ResidentOfNorthAmericanContinent(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (Canadian(x) & Resident(x) -> ResidentOfNorthAmericanContinent(x))	Each Canadian resident can travel freely within Europe.	all x. (Canadian(x) & Resident(x) -> CanTravelFreelyWithinEurope(x))	e	True	False
59	The residents of western countries can travel freely within Europe. ## All residents of major western countries are residents of western countries.	all x. (ResidentOfWesternCountry(x) -> CanTravelFreelyWithinEurope(x)) ## all x. (ResidentOfMajorWesternCountry(x) -> ResidentOfWesternCountry(x))	The residents of major western countries have the right to live in Europe.	all x. (ResidentOfMajorWesternCountry(x) -> RightToLiveInEurope(x))	e	False	False
60	No delegate finished the report on time.	not exists x. (Delegate(x) & FinishedReportOnTime(x))	Some Scandinavian delegate finished the report on time.	exists x. (Scandinavian(x) & Delegate(x) & FinishedReportOnTime(x))	c	False	True
61	Some delegates finished the survey on time.	exists x. (Delegate(x) & FinishedSurveyOnTime(x))	Some Irish delegates finished the survey on time.	exists x. (Irish(x) & Delegate(x) & FinishedSurveyOnTime(x))	n	False	False
62	Many delegates obtained interesting results from the survey.	all x. (Delegate(x) & ObtainedInterestingResults(x) -> Survey(x))	Many British delegates obtained interesting results from the survey.	exists x. (British(x) & Delegate(x) & ObtainedInterestingResults(x))	n	False	False
63	Most Europeans can travel freely within Europe.	all x. (European(x) -> CanTravelFreelyWithinEurope(x))	Most Europeans who are resident outside Europe can travel freely within Europe.	all x. (European(x) & ResidentOutsideEurope(x) -> CanTravelFreelyWithinEurope(x))	n	True	False
64	Few committee members are from southern Europe.	exists x. (Committee(x) & Member(x) & FromSouthernEurope(x))	Few female committee members are from southern Europe.	exists x. (FemaleCommitteeMember(x) & FromSouthernEurope(x))	e	False	False
65	Both commissioners used to be in business.	all x.all y. (Commissioner(x) & Commissioner(y) -> UsedToBeInBusiness(x) & UsedToBeInBusiness(y))	Both female commissioners used to be in business.	all x. (Commissioner(x) & Female(x) -> UsedToBeInBusiness(x))	n	True	False
66	At least three commissioners spend time at home.	exists x.exists y.exists z. (Commissioner(x) & Commissioner(y) & Commissioner(z) & SpendsTimeAtHome(x) & SpendsTimeAtHome(y) & SpendsTimeAtHome(z))	At least three male commissioners spend time at home.	exists x. (Commissioner(x) & Male(x) & SpendsTimeAtHome(x))	n	False	False
67	At most ten commissioners spend time at home.	exists x. (Commissioner(x) & SpendsTimeAtHome(x, 10))	At most ten female commissioners spend time at home.	exists x. (Commissioner(x) & Female(x) & SpendsTimeAtHome(x, 10))	e	False	False
68	Every representative and client was at the meeting.	all x.all y. (Representative(x) & Client(y) -> AtMeeting(x, y))	Every representative was at the meeting.	all x. (Representative(x) -> exists y. (Meeting(y) & Attended(x, y)))	e	False	False
69	Every representative and client was at the meeting.	all x.all y. (Representative(x) & Client(y) -> AtMeeting(x, y))	Every representative was at the meeting.	all x. (Representative(x) -> exists y. (Meeting(y) & Attended(x, y)))	n	False	False
70	Every representative or client was at the meeting.	all x. (Representative(x) | Client(x) -> At(x) & Meeting(x))	Every representative and every client was at the meeting.	all x. all y. (Representative(x) & Client(y) -> AtMeeting(x, y))	e	False	False
71	The chairman read out the items on the agenda.	all x.all y. (Chairman(x) & Agenda(y) -> ReadsOutItems(x, y))	The chairman read out every item on the agenda.	all x.all y. (Chairman(x) & Agenda(y) -> ReadOutEveryItem(x, y))	e	False	False
72	The people who were at the meeting voted for a new chairman.	all x. (Person(x) & At(x) & Meeting(x) -> VotedForNewChairman(x))	Everyone at the meeting voted for a new chairman.	all x. (PersonAtMeeting(x) -> VotedForNewChairman(x))	n	False	False
73	All the people who were at the meeting voted for a new chairman.	all x. (Person(x) & At(x) & Meeting(x) -> VotedForNewChairman(x))	Everyone at the meeting voted for a new chairman.	all x. (PersonAtMeeting(x) -> VotedForNewChairman(x))	e	False	False
74	The people who were at the meeting all voted for a new chairman.	all x. (Person(x) & At(x) & Meeting(x) -> VotedForNewChairman(x))	Everyone at the meeting voted for a new chairman.	all x. (PersonAtMeeting(x) -> VotedForNewChairman(x))	e	False	False
75	The inhabitants of Cambridge voted for a Labour MP.	all x. (InhabitantOfCambridge(x) -> VotedForLabourMP(x))	Every inhabitant of Cambridge voted for a Labour MP.	all x. (InhabitantOfCambridge(x) -> VotedForLabourMP(x))	n	True	False
76	The Ancient Greeks were noted philosophers.	all x. (Ancient(x) & Greek(x) -> Philosophers(x))	Every Ancient Greek was a noted philosopher.	all x. (Ancient(x) & Greek(x) -> Philosopher(x))	n	True	False
77	The Ancient Greeks were all noted philosophers.	all x. (Ancient(x) & Greek(x) -> Philosopher(x))	Every Ancient Greek was a noted philosopher.	all x. (Ancient(x) & Greek(x) -> Philosopher(x))	e	True	False
78	Software faults were blamed for the system failure.	all x. (Software(x) & Fault(x) -> BlamedForSystemFailure(x))	The system failure was blamed on one or more software faults.	all x. (System(x) & Failure(x) -> exists y. (Software(y) & Fault(y) & BlamedOn(x, y)))	e	False	False
79	Software faults were blamed for the system failure. ## Bug # 32-985 is a known software fault.	all x. (Software(x) & Fault(x) -> BlamedForSystemFailure(x)) ## KnownSoftwareFault(bug32985)	Bug # 32-985 was blamed for the system failure.	exists x. (Bug(x) & System(y) & Failure(y) & BlamedFor(x, y))	n	False	False
80	Clients at the demonstration were all impressed by the system's performance. ## Smith was a client at the demonstration.	all x. (Client(x) & At(x) & Demonstration(x) -> ImpressedBySystem(x)) ## exists x. exists y. (Smith(x) & Demonstration(y) & ClientAt(x, y))	Smith was impressed by the system's performance.	ImpressedByPerformance(smith, system)	e	False	False
81	Clients at the demonstration were impressed by the system's performance.	all x. (Client(x) & At(x) & Demonstration(x) -> ImpressedBySystemPerformance(x))	Most clients at the demonstration were impressed by the system's performance.	all x. (Client(x) & At(x) & Demonstration(x) -> ImpressedBySystemPerformance(x))	e	True	False
82	University graduates make poor stock-market traders. ## Smith is a university graduate.	all x. (University(x) & Graduate(x) -> PoorStockMarketTrader(x)) ## University(smith) & Graduate(smith)	Smith is likely to make a poor stock market trader.	all x. (Smith(x) -> PoorStockMarketTrader(x))	e	False	False
83	University graduates make poor stock-market traders. ## Smith is a university graduate.	all x. (University(x) & Graduate(x) -> PoorStockMarketTrader(x)) ## University(smith) & Graduate(smith)	Smith will make a poor stock market trader.	all x. (Smith(x) -> PoorStockMarketTrader(x))	n	False	False
84	Just one accountant attended the meeting.	exists x. (Accountant(x) & Attended(x) & Meeting(x))	No accountants attended the meeting.	not exists x. (Accountant(x) & Attended(x) & Meeting(x))	c	False	True
85	Just one accountant attended the meeting.	exists x. (Accountant(x) & Attended(x) & Meeting(x))	No accountant attended the meeting.	not exists x. (Accountant(x) & Attended(x) & Meeting(x))	c	False	True
86	Just one accountant attended the meeting.	exists x. (Accountant(x) & Attended(x) & Meeting(x))	Some accountants attended the meeting.	exists x. (Accountant(x) & Attended(x) & Meeting(x))	e	True	False
87	Just one accountant attended the meeting.	exists x. (Accountant(x) & Attended(x) & Meeting(x))	Some accountant attended the meeting.	exists x. (Accountant(x) & Attended(x) & Meeting(x))	e	True	False
88	Just one accountant attended the meeting.	exists x. (Accountant(x) & Attended(x) & Meeting(x))	Some accountants attended the meeting.	exists x. (Accountant(x) & Attended(x) & Meeting(x))	c	True	False
89	Just one accountant attended the meeting.	exists x. (Accountant(x) & Attended(x) & Meeting(x))	Some accountant attended the meeting.	exists x. (Accountant(x) & Attended(x) & Meeting(x))	e	True	False
90	Smith signed two contracts. ## Jones signed two contracts.	exists x. exists y. (Smith(x) & Contract(y) & Signed(x, y)) ## exists x. exists y. (Jones(x) & Contract(y) & Signed(x, y))	Smith and Jones signed two contracts.	exists x. exists y. (Smith(x) & Jones(y) & Contract(z) & Signed(x, z) & Signed(y, z))	e	False	False
91	Mary used her workstation.	Used(mary) & Workstation(mary)	Mary is female.	Female(mary)	e	False	False
92	Every student used her workstation. ## Mary is a student.	all x. (Student(x) -> Used(x) & Workstation(x)) ## Student(mary)	Mary used her workstation.	Used(mary) & Workstation(mary)	e	True	False
93	Every student used her workstation. ## Mary is a student.	all x. (Student(x) -> Used(x) & Workstation(x)) ## Student(mary)	Mary has a workstation.	exists x. (Workstation(x) & OwnedBy(x, Mary))	e	False	False
94	No student used her workstation. ## Mary is a student.	not exists x. (Student(x) & Workstation(x)) ## Student(mary)	Mary used a workstation.	exists x. (Workstation(x) & UsedBy(x, Mary))	c	False	False
95	Smith delivered a report to ITEL. ## She also delivered them an invoice. ## And she delivered them a project proposal.	DeliveredReport(smith, itel) ## all x.all y. (Woman(x) & Delivered(x, y) & Invoice(y) -> DeliveredInvoice(x, y)) ## all x.all y. (Woman(x) & Project(y) & DeliveredProposal(x, y) -> ProjectManager(x, y))	Smith delivered a report, an invoice and a project proposal to ITEL.	all x.all y.all z. (Smith(x) & Report(y) & Invoice(z) & Project(y) & Proposal(y) -> DeliveredTo(x, y, z, ITEL))	e	False	False
96	Smith took a machine on Tuesday, and Jones took a machine on Wednesday. ## They put them in the lobby.	all x.all y. (Smith(x) & Machine(y) -> TookOnTuesday(x, y)) & (Jones(x) & Machine(y) -> TookOnWednesday(x, y)) ## all x.all y. (They(x) & PutIn(x, y) -> In(y) & Lobby(y))	Smith and Jones put two machines in the lobby.	all x.all y. (Smith(x) & Jones(y) -> (PutMachine(x, lobby) & PutMachine(y, lobby)))	e	False	False
97	Each department has a dedicated line. ## The sales department rents it from BT.	all x. (Department(x) -> HasDedicatedLine(x)) ## RentsFrom(SalesDepartment, BT)	The sales department rents a line from BT.	RentLine(salesDepartment, BT)	e	False	False
98	GFI owns several computers. ## ITEL maintains them.	all x. (GFI(x) -> Owns(x) & Computers(x)) ## all x. (ITEL(x) -> Maintains(x))	ITEL maintains all the computers that GFI owns.	all x.all y. (ITEL(x) & GFI(y) -> MaintainsComputers(x, y))	e	False	False
99	Every customer who owns a computer has a service contract for it. ## MFI is a customer that owns exactly one computer.	all x. (Customer(x) & Owns(x) & Computer(x) -> HasServiceContract(x)) ## all x. (MFI(x) -> OwnsExactlyOneComputer(x))	MFI has a service contract for all its computers.	all x. (MFI(x) & Computer(x) -> HasServiceContract(x))	e	False	False
100	Every customer who owns a computer has a service contract for it. ## MFI is a customer that owns several computers.	all x. (Customer(x) & Owns(x) & Computer(x) -> HasServiceContract(x)) ## all x. (MFI(x) -> OwnsSeveralComputers(x))	MFI has a service contract for all its computers.	all x. (MFI(x) & Computer(x) -> HasServiceContract(x))	e	False	False
101	Every executive who had a laptop computer brought it to take notes at the meeting. ## Smith is a executive who owns five different laptop computers.	all x. (Executive(x) & HadLaptopComputer(x) -> BroughtToTakeNotesAtMeeting(x)) ## Executive(smith) & OwnsLaptopComputers(smith, 5)	Smith took five laptop computers to the meeting.	exists x. (Smith(x) & Took(x, y) & Laptop(y) & Computer(y) & NumberOf(y, 5) & At(y) & Meeting(y))	n	False	False
102	A company director awarded himself a large payrise.	all x. (Company(x) & Director(x) & AwardedLargePayrise(x) -> DirectorAwardsSelf(x))	A company director has awarded and been awarded a payrise.	all x. (Company(x) & Director(x) -> (Awarded(x) & Payrise(x) & not Awarded(x) & Payrise(x)))	e	False	False
103	John spoke to Mary at four o'clock. ## And Bill did at five o'clock.	SpokeTo(john, mary, fourOclock) ## all x. (Bill(x) & Time(x, 5) -> DidAt(x, 5))	Bill spoke to Mary at five o'clock.	exists x. exists y. exists z. (Bill(x) & Mary(y) & Five(z) & Oclock(z) & SpokeAt(x, y, z))	e	False	False
104	John has spoken to Mary. ## Bill is going to.	HasSpoken(john, mary) ## Going(bill) & To(bill)	Bill will speak to Mary.	SpeakTo(bill, mary)	e	False	False
105	John spoke to Mary on Monday. ## Bill didn't.	SpokeTo(john, mary, monday) ## not Bill(x)	Bill spoke to Mary on Monday.	SpokeTo(bill, mary, monday)	c	False	False
106	Has John spoken to Mary? ## Bill has.	exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y)) ## Has(bill)	Bill has spoken to Mary.	exists x. exists y. (Bill(x) & Mary(y) & SpokenTo(x, y))	e	False	False
107	John has spoken to Mary. ## The students have too.	HasSpoken(john, mary) ## all x. (Student(x) -> Too(x))	The students have spoken to Mary.	all x.all y. (Student(x) & Mary(y) -> SpokenTo(x, y))	e	False	False
108	John is going to Paris by car, and the students by train.	all x. all y. (John(x) & Paris(y) -> GoesByCar(x, y)) & (Students(x) & Train(y) -> GoesByTrain(x, y))	The students are going to Paris by train.	all x. (Student(x) -> GoingToParisByTrain(x))	e	False	False
109	John had his paper accepted. ## Bill doesn't know why.	HadPaperAccepted(john) ## not (exists x. (Person(x) & Knows(x, y) & Why(y)))	Bill knows why John had his paper accepted.	KnowsWhy(Bill, John, PaperAccepted)	c	False	False
110	John spoke to Mary. ## And to Sue.	"exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y)) ## all x. (Person(x) & Name(x, ""Sue"") -> Person(x))"	John spoke to Sue.	SpokeTo(john, sue)	e	False	False
111	John spoke to Mary. ## On Friday.	exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y)) ## Friday(x)	John spoke to Mary on Friday.	SpokeTo(john, mary, friday)	e	False	False
112	John spoke to Mary on Thursday. ## And on Friday.	SpokeTo(john, mary, thursday) ## all x. (Friday(x) -> On(x) & Friday(x))	John spoke to Mary on Friday.	SpokeTo(john, mary, friday)	e	False	False
113	Twenty men work in the Sales Department. ## But only one woman.	exists x. (Man(x) & WorksInSalesDepartment(x)) ## exists x. (Woman(x) & not exists y. (Woman(y) & not Woman(z) & Man(z) & DifferentFrom(y, z)))	Two women work in the Sales Department.	exists x. exists y. (Woman(x) & Woman(y) & WorkInSalesDepartment(x) & WorkInSalesDepartment(y))	c	False	False
114	John wants to know how many men work part time. ## And women.	WantsToKnow(John, NumberOfPartTimeMen) ## all x. (Woman(x))	John wants to know how many women work part time.	WantsToKnow(John, NumberOfWomenWorkingPartTime)	e	False	False
115	John wants to know how many men work part time, and which.	all x. (Man(x) & Part(x) & Time(x) -> WantsToKnow(John, x))	John wants to know which men work part time.	all x. (Man(x) & Part(x) & Time(x) -> WantsToKnow(John, x))	e	True	False
116	Bill spoke to everyone that John did. ## John spoke to Mary.	all x. all y. (Bill(x) & John(y) -> SpokeTo(x, y)) ## exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y))	Bill spoke to Mary.	exists x. exists y. (Bill(x) & Mary(y) & SpokeTo(x, y))	e	False	False
117	Bill spoke to everyone that John did. ## Bill spoke to Mary.	all x. all y. (Bill(x) & John(y) -> SpokeTo(x, y)) ## exists x. exists y. (Bill(x) & Mary(y) & SpokeTo(x, y))	John spoke to Mary.	exists x. exists y. (Person(x) & Person(y) & SpokenTo(x, y))	n	False	False
118	John needed to buy a car, and Bill did.	all x.all y. (NeededToBuyCar(x) & NeededToBuyCar(y) -> (John(x) & Bill(y)))	Bill bought a car.	exists x. exists y. (Bill(x) & Car(y) & Bought(x, y))	n	False	False
119	Smith claimed he had costed his proposal and so did Jones.	all x. all y. (Smith(x) & Jones(y) -> (Costed(x) & Proposal(x) & CostedProposal(y)))	Jones claimed he had costed his own proposal.	ClaimedCostedProposal(jones)	e	False	False
120	Smith claimed he had costed his proposal and so did Jones.	all x. all y. (Smith(x) & Jones(y) -> (Costed(x) & Proposal(x) & CostedProposal(y)))	Jones claimed he had costed Smith's proposal.	ClaimedCosted(jones, smith)	e	False	False
121	Smith claimed he had costed his proposal and so did Jones.	all x. all y. (Smith(x) & Jones(y) -> (Costed(x) & Proposal(x) & CostedProposal(y)))	Jones claimed Smith had costed Smith's proposal.	ClaimedCosted(jones, smith, proposal)	e	False	False
122	Smith claimed he had costed his proposal and so did Jones.	all x. all y. (Smith(x) & Jones(y) -> (Costed(x) & Proposal(x) & CostedProposal(y)))	Jones claimed Smith had costed Jones' proposal.	ClaimedCosted(jones, smith, proposal)	n	False	False
123	John is a man and Mary is a woman. ## John represents his company and so does Mary.	all x. all y. (Man(x) & Woman(y) -> (John(x) & Mary(y))) ## all x.all y. (John(x) & Mary(y) -> (Represents(x) & Company(x) & RepresentsCompany(y)))	Mary represents her own company.	RepresentsOwnCompany(mary)	e	False	False
124	Bill suggested to Frank's boss that they should go to the meeting together, and Carl to Alan's wife.	all x.all y.all z. (Bill(x) & Frank(y) & Alan(z) -> (SuggestedTo(x, y, z) & not SuggestedTo(x, z, y)))	If it was suggested that Bill and Frank should go together, it was suggested that Carl and Alan should go together.	all x. all y. all z. all w. (Suggested(x, y, z) & Suggested(y, w, z) -> (Bill(x) & Frank(y) & Carl(w) & Alan(z)))	e	False	False
125	Bill suggested to Frank's boss that they should go to the meeting together, and Carl to Alan's wife.	all x.all y.all z. (Bill(x) & Frank(y) & Alan(z) -> (SuggestedTo(x, y, z) & not SuggestedTo(x, z, y)))	If it was suggested that Bill and Frank's boss should go together, it was suggested that Carl and Alan's wife should go together.	all x. all y. all z. all w. (Suggested(x, y, z) & Boss(y) & Bill(y) & Frank(y) & Suggested(x, w, z) & Boss(z) & Carl(z) & Alan(z) -> Suggested(x, w, z))	e	True	False
126	A lawyer signed every report, and so did an auditor. ## That is, there was one lawyer who signed all the reports.	all x.all y. (Lawyer(x) & Auditor(y) -> (Signed(x) & Report(x) & SignedReport(y))) ## exists x. (Lawyer(x) & SignedAllReports(x))	There was one auditor who signed all the reports.	exists x. (Auditor(x) & SignedAllReports(x))	e	False	False
127	John has a genuine diamond.	all x. (Diamond(x) & Genuine(x) -> OwnedBy(x, John))	John has a diamond.	Has(john) & Diamond(john)	e	False	False
128	John is a successful former university student.	SuccessfulFormerStudent(john)	John is successful.	Successful(john)	e	False	False
129	John is a former successful university student.	FormerSuccessfulStudent(john)	John is successful.	Successful(john)	n	False	False
130	John is a former successful university student.	FormerSuccessfulStudent(john)	John is a university student.	University(john) & Student(john)	n	False	False
131	Every mammal is an animal.	all x. (Mammal(x) -> Animal(x))	Every four-legged mammal is a four-legged animal.	all x. (FourLeggedMammal(x) -> FourLeggedAnimal(x))	e	False	False
132	Dumbo is a four-legged animal.	FourLeggedAnimal(dumbo)	Dumbo is four-legged.	Four(dumbo) & Legged(dumbo)	e	False	False
133	Mickey is a small animal.	all x. (Animal(x) & Small(x) -> Mickey(x))	Mickey is a large animal.	Large(mickey) & Animal(mickey)	c	False	False
134	Fido is not a small animal.	all x. (Animal(x) & Small(x) -> not Fido(x))	Fido is a large animal.	Large(fido) & Animal(fido)	n	False	False
135	Fido is not a large animal.	all x. (Animal(x) & Large(x) -> not Fido(x))	Fido is a small animal.	Small(fido) & Animal(fido)	n	False	False
136	All mice are small animals. ## All elephants are large animals. ## Mickey is a large mouse. ## Dumbo is a small elephant.	all x. (Mouse(x) -> Small(x) & Animal(x)) ## all x. (Elephant(x) -> Large(x) & Animal(x)) ## Large(mickey) & Mouse(mickey) ## Small(dumbo) & Elephant(dumbo)	Dumbo is larger than Mickey.	Larger(Dumbo, Mickey)	e	False	False
137	All legal authorities are law lecturers. ## All law lecturers are legal authorities.	all x. (Legal(x) & Authority(x) -> Law(x) & Lecturer(x)) ## all x. (Law(x) & Lecturer(x) -> Legal(x) & Authority(x))	All fat legal authorities are fat law lecturers.	all x. (FatLegalAuthority(x) -> FatLawLecturer(x))	e	False	False
138	All legal authorities are law lecturers. ## All law lecturers are legal authorities.	all x. (Legal(x) & Authority(x) -> Law(x) & Lecturer(x)) ## all x. (Law(x) & Lecturer(x) -> Legal(x) & Authority(x))	All competent legal authorities are competent law lecturers.	all x. (CompetentLegalAuthority(x) -> Law(x) & Lecturer(x))	n	False	False
139	The PC-6082 is faster than the ITEL-XZ.	Faster(PC_6082, ITEL_XZ)	The PC-6082 is fast.	Fast(PC6082)	n	False	False
140	The PC-6082 is faster than the ITEL-XZ. ## The PC-6082 is slow.	Faster(PC_6082, ITEL_XZ) ## all x. (P(x) & C6082(x) -> Slow(x))	The ITEL-XZ is fast.	Fast(ITELXZ)	c	False	False
141	The PC-6082 is as fast as the ITEL-XZ.	all x.all y. (P(x) & C6082(x) & ITELXZ(y) -> AsFastAs(x, y))	The PC-6082 is fast.	Fast(PC6082)	n	False	False
142	The PC-6082 is as fast as the ITEL-XZ.	all x.all y. (P(x) & C6082(x) & ITELXZ(y) -> AsFastAs(x, y))	The PC-6082 is faster than the ITEL-XZ.	Faster(PC_6082, ITEL_XZ)	n	False	False
143	The PC-6082 is as fast as the ITEL-XZ.	all x.all y. (P(x) & C6082(x) & ITELXZ(y) -> AsFastAs(x, y))	The PC-6082 is slower than the ITEL-XZ.	all x. all y. (PC_6082(x) & ITEL_XZ(y) -> SlowerThan(x, y))	c	False	False
144	ITEL won more orders than APCOM did.	MoreOrders(ITEL, APCOM)	ITEL won some orders.	exists x. (Order(x) & Won(x, ITEL))	e	False	False
145	ITEL won more orders than APCOM.	MoreOrders(ITEL, APCOM)	ITEL won some orders.	exists x. (Order(x) & Won(x, ITEL))	e	False	False
146	ITEL won more orders than the APCOM contract.	MoreOrders(ITEL, APCOM)	ITEL won the APCOM contract.	WonAPCOMContract(ITEL)	e	False	False
147	ITEL won more orders than the APCOM contract.	MoreOrders(ITEL, APCOM)	ITEL won more than one order.	exists x. (Order(x) & Won(ITEL, x))	e	False	False
148	ITEL won more orders than APCOM lost.	MoreOrdersWon(ITEL, APCOM)	ITEL won some orders.	exists x. (Order(x) & Won(x, ITEL))	e	False	False
149	ITEL won more orders than APCOM lost. ## APCOM lost ten orders.	MoreOrdersWon(ITEL, APCOM) ## LostOrders(APCOM, 10)	ITEL won at least eleven orders.	exists x. (Order(x) & Won(x, ITEL))	e	False	False
150	The PC-6082 is faster than 500 MIPS. ## The ITEL-ZX is slower than 500 MIPS.	FasterThan(PC6082, 500MIPS) ## all x. (ITELZX(x) -> SlowerThan500MIPS(x))	The PC-6082 is faster than the ITEL-ZX.	Faster(PC_6082, ITEL_ZX)	e	False	False
151	APCOM has a more important customer than ITEL.	all x.all y. (APCOM(x) & ITEL(y) -> MoreImportantCustomer(x, y))	APCOM has a more important customer than ITEL is.	all x.all y. (APCOM(x) & ITEL(y) -> MoreImportantCustomer(x, y))	e	True	False
152	APCOM has a more important customer than ITEL.	all x.all y. (APCOM(x) & ITEL(y) -> MoreImportantCustomer(x, y))	APCOM has a more important customer than ITEL has.	all x.all y. (APCOM(x) & ITEL(y) -> MoreImportantCustomer(x, y))	e	True	False
153	ITEL has a factory in Birmingham.	HasFactoryIn(ITEL, Birmingham)	ITEL currently has a factory in Birmingham.	HasFactoryIn(ITEL, Birmingham)	e	True	False
154	Since 1992 ITEL has been in Birmingham. ## It is now 1996.	all x. (ITEL(x) -> LocatedInBirmingham(x, 1992)) ## Year(1996)	Itel was in Birmingham in 1993.	exists x. (Itel(x) & InBirmingham(x, 1993))	e	False	False
155	ITEL has made a loss since 1992. ## It is now 1996.	all x. (ITEL(x) -> MadeLossSince(x, 1992)) ## Year(1996)	ITEL made a loss in 1993.	exists x. (ITEL(x) & MadeLoss(x, 1993))	n	False	False
156	ITEL has made a loss since 1992. ## It is now 1996.	all x. (ITEL(x) -> MadeLossSince(x, 1992)) ## Year(1996)	ITEL made a loss in 1993.	exists x. (ITEL(x) & MadeLoss(x, 1993))	e	False	False
157	In March 1993 APCOM founded ITEL.	all x.all y. (March(x) & 1993(x) & APCOM(y) -> FoundedITEL(y))	ITEL existed in 1992.	Existed(ITEL, 1992)	c	False	False
158	Yesterday APCOM signed the contract. ## Today is Saturday, July 14th.	ContractSigned(APCOM, yesterday) ## Saturday(today) & July(month) & 14(day)	APCOM signed the contract Friday, 13th.	SignedContract(APCOM, Friday, 13th)	e	False	False
159	Smith left before Jones left. ## Jones left before Anderson left.	LeftBefore(smith, jones) ## LeftBefore(jones, anderson)	Smith left before Anderson left.	LeftBefore(Smith, Anderson)	e	False	False
160	Smith left after Jones left. ## Jones left after Anderson left.	all x. all y. (Smith(x) & Jones(y) -> LeftAfter(x, y)) ## Left(jones) & Left(anderson)	Smith left after Anderson left.	all x. all y. (Smith(x) & Anderson(y) -> LeftAfter(x, y))	e	False	False
161	Smith was present after Jones left. ## Jones left after Anderson was present.	all x. all y. (Present(x) & Left(y) -> After(x, y)) ## Left(jones) & Present(anderson) -> LeftAfter(jones, anderson)	Smith was present after Anderson was present.	all x. all y. (Smith(x) & Anderson(y) -> PresentAfter(x, y))	n	False	False
162	Smith swam to the shore. ## Jones swam to the shore. ## Smith swam to the shore before Jones swam to the shore.	all x. (Smith(x) -> SwamToShore(x)) ## all x. (Jones(x) -> SwamToShore(x)) ## all x.all y. (Smith(x) & Jones(y) -> SwamToShoreBefore(x, y))	Jones swam to the shore after Smith swam to the shore.	all x.all y. (Jones(x) & Smith(y) -> (SwamToShore(x) & SwamToShore(y)))	e	True	False
163	Smith was present. ## Jones was present. ## Smith was present after Jones was present.	"exists x. (Present(x) & Smith(x)) ## exists x. (Present(x) & Person(x) & Name(x, ""Jones"")) ## all x. all y. (Present(x) & Present(y) -> (Present(x) & not Present(y) | (Present(y) & not Present(x))))"	Jones was present before Smith was present.	all x. all y. (Present(x) & Present(y) -> Before(x, y))	n	True	True
164	Smith was present. ## Jones was present. ## Smith was present before Jones was present.	"exists x. (Present(x) & Smith(x)) ## exists x. (Present(x) & Person(x) & Name(x, ""Jones"")) ## all x. all y. (Smith(x) & Jones(y) -> PresentBefore(x, y))"	Jones was present after Smith was present.	all x. all y. (Present(x) & Present(y) -> PresentAfter(x, y))	n	False	False
165	Smith lived in Birmingham in 1991.	LivedIn(Smith, Birmingham, 1991)	Smith lived in Birmingham in 1992.	LivedIn(Smith, Birmingham, 1992)	n	False	False
166	Smith wrote his first novel in 1991.	WroteFirstNovel(smith, 1991)	Smith wrote his first novel in 1992.	WroteFirstNovel(smith, 1992)	c	False	False
167	Smith wrote a novel in 1991.	WroteNovel(smith, 1991)	Smith wrote it in 1992.	WroteInYear(smith, 1992)	c	False	False
168	Smith wrote a novel in 1991.	WroteNovel(smith, 1991)	Smith wrote a novel in 1992.	WroteNovel(smith, 1992)	n	False	False
169	Smith was running a business in 1991.	exists x. (Person(x) & Business(x) & Ran(x, 1991))	Smith was running it in 1992.	Running(Smith, 1992)	n	False	False
170	Smith discovered a new species in 1991.	exists x. (DiscoveredNewSpecies(x) & Year(x, 1991))	Smith discovered it in 1992.	Discovered(Smith, 1992)	c	False	False
171	Smith wrote a report in two hours. ## Smith started writing the report at 8 am.	WroteReport(smith, report, twoHours) ## WritingReport(Smith, 8am)	Smith had finished writing the report by 11 am.	FinishedWritingReport(Smith, 11am)	e	False	False
172	Smith wrote a report in two hours.	WroteReport(smith, report, twoHours)	Smith spent two hours writing the report.	SpentTwoHoursWritingReport(smith)	n	False	False
173	Smith wrote a report in two hours.	WroteReport(smith, report, twoHours)	Smith spent more than two hours writing the report.	SpentMoreThanTwoHoursWritingReport(smith)	c	False	False
174	Smith wrote a report in two hours.	WroteReport(smith, report, twoHours)	Smith wrote a report.	exists x. (Report(x) & Wrote(Smith, x))	e	False	False
175	Smith discovered a new species in two hours.	DiscoveredNewSpecies(smith, twoHours)	Smith spent two hours discovering the new species.	DiscoveredNewSpecies(smith, twoHours)	c	True	False
176	Smith discovered a new species in two hours.	DiscoveredNewSpecies(smith, twoHours)	Smith discovered a new species.	exists x. exists y. (Smith(x) & New(y) & Species(y) & Discovered(x, y))	e	False	False
177	Smith discovered many new species in two hours.	all x. (DiscoveredNewSpecies(x, Smith) -> Time(x, TwoHours))	Smith spent two hours discovering new species.	DiscoveredNewSpecies(Smith, 2)	e	False	False
178	Smith was running his own business in two years.	all x. (Smith(x) -> RanOwnBusiness(x, 2))	Smith spent two years running his own business.	exists x. (Person(x) & Business(y) & Owns(x, y) & RanForTwoYears(x, y))	n	False	False
179	Smith was running his own business in two years.	all x. (Smith(x) -> RanOwnBusiness(x, 2))	Smith spent more than two years running his own business.	all x. (Smith(x) -> RanOwnBusiness(x, y) & Years(y) & MoreThan(y, 2))	n	False	False
180	Smith was running his own business in two years.	all x. (Smith(x) -> RanOwnBusiness(x, 2))	Smith ran his own business.	exists x. (Person(x) & Business(y) & Owns(x, y))	e	False	False
181	In two years Smith owned a chain of businesses.	all x. (TwoYearsAgo(x) -> OwnedChainOfBusinesses(x, Smith))	Smith owned a chain of business for two years.	OwnedChainOfBusiness(Smith, TwoYears)	n	False	False
182	Smith lived in Birmingham for two years.	LivedIn(Smith, Birmingham, 2)	Smith lived in Birmingham for a year.	LivedIn(smith, birmingham, year)	e	False	False
183	Smith lived in Birmingham for two years.	LivedIn(Smith, Birmingham, 2)	Smith lived in Birmingham for exactly a year.	LivedIn(smith, birmingham, year)	c	False	False
184	Smith ran his own business for two years.	RanOwnBusiness(smith, 2)	Smith ran his own business for a year.	RanOwnBusiness(smith, year)	e	False	False
185	Smith ran his own business for two years.	RanOwnBusiness(smith, 2)	Smith ran his own business.	exists x. (Person(x) & Business(y) & Owns(x, y))	e	False	False
186	Smith wrote a report for two hours.	WroteReport(smith, report, twoHours)	Smith wrote a report.	exists x. (Report(x) & Wrote(Smith, x))	n	False	False
187	Smith had left the house at a quarter past five. ## Then she took a taxi to the station.	LeftHouseAtQuarterPastFive(smith) ## all x. (Taxi(x) & To(x, y) & Station(y) -> Takes(x, y))	Smith left the house before she took a taxi to the station.	Left(smith) & House(smith) & TookTaxi(smith, station)	e	False	False
188	Smith arrived in Paris on the 5th of May, 1995. ## Today is the 15th of May, 1995. ## She is still in Paris.	ArrivedInParis(smith, 1995, 5, may) ## Date(today, 15, 5, 1995) ## StillInParis(she)	Smith was in Paris on the 7th of May, 1995.	Smith(x) & InParis(x, 7thOfMay1995)	e	False	False
189	When Smith arrived in Katmandu she had been travelling for three days.	all x. (ArrivedInKatmandu(x) -> TravelledForThreeDays(x))	Smith had been travelling the day before she arrived in Katmandu.	all x. (Smith(x) & Travelled(x, y) & Day(y) & Before(y) -> ArrivedIn(x, z) & Katmandu(z))	e	False	False
190	While Jones was updating the program, Mary came in and told him about the board meeting. ## She finished before he did.	all x.all y.all z. (Program(x) & Jones(y) & Mary(z) & Updating(y, x) & CameIn(z, y) -> ToldAboutBoardMeeting(z, y)) ## FinishedBefore(she, he)	Mary's story lasted as long as Jones's updating the program.	LastedAsLongAs(mary, jones)	c	False	False
191	When Jones got his job at the CIA, he knew that he would never be allowed to write his memoirs.	all x. (Jones(x) & GotCIAJob(x) -> not Allows(x) & Memoirs(x))	It is the case that Jones is not and will never be allowed to write his memoirs.	all x. (Jones(x) -> not Writes(x) & Memoirs(x))	e	False	False
192	Last week I already knew that when, in a month's time, Smith would discover that she had been duped she would be furious.	all x. (Last(x) & Week(x) & Months(x) & Time(x) & Smith(x) & Discovered(x) & Duped(x) -> Furious(x))	It will be the case that in a few weeks Smith will discover that she has been duped; and she will be furious.	all x. (Few(x) & Weeks(x) & Smith(x) -> (Discovers(x) & Duped(x) & Furious(x)))	e	False	False
193	No one gambling seriously stops until he is broke. ## No one can gamble when he is broke.	all x. (Gambler(x) & Gambling(x) & Seriously(x) -> Broke(x)) ## all x. (Gambler(x) & Broke(x) -> not Can(x) & Gamble(x))	Everyone who starts gambling seriously stops the moment he is broke.	all x. (Gambler(x) & Serious(x) & Gambler(x) & Broke(x) -> Stops(x) & Gambling(x))	e	False	False
194	No one who starts gambling seriously stops until he is broke.	all x. (Gambler(x) & Serious(x) & Gambler(x) -> not StopsUntilBroke(x))	Everyone who starts gambling seriously continues until he is broke.	all x. (Gambler(x) & Serious(x) & Gambler(x) -> ContinuesUntilBroke(x))	e	False	False
195	Nobody who is asleep ever knows that he is asleep. ## But some people know that they have been asleep after they have been asleep.	all x. (Asleep(x) -> not KnowsThatHeIsAsleep(x)) ## exists x. (Person(x) & Asleep(x) & not Knows(x, HasBeenAsleep))	Some people discover that they have been asleep.	exists x. (Person(x) & Discovered(x) & Asleep(x))	e	False	False
196	ITEL built MTALK in 1993.	BuiltIn(ITEL, MTALK, 1993)	ITEL finished MTALK in 1993.	Finished(ITEL, MTALK, 1993)	e	False	False
197	ITEL was building MTALK in 1993.	Building(ITEL, MTALK, 1993)	ITEL finished MTALK in 1993.	Finished(ITEL, MTALK, 1993)	n	False	False
198	ITEL was winning the contract from APCOM in 1993.	WinningContract(ITEL, APCOM, 1993)	ITEL won a contract in 1993.	WonContract(ITEL, 1993)	n	False	False
199	Smith and Jones left the meeting.	exists x. exists y. (Smith(x) & Jones(y) & Left(x) & Meeting(x) & LeftMeeting(y))	Smith left the meeting.	Left(smith) & Meeting(smith)	e	False	False
200	Smith and Jones left the meeting.	exists x. exists y. (Smith(x) & Jones(y) & Left(x) & Meeting(x) & LeftMeeting(y))	Jones left the meeting.	Left(jones) & Meeting(jones)	e	False	False
201	Smith, Anderson and Jones met.	Meeting(smith, anderson, jones)	There was a group of people that met.	exists x.exists y.exists z. (Person(x) & Person(y) & Person(z) & Met(x, y, z))	e	False	False
202	Smith knew that ITEL had won the contract in 1992.	Knew(Smith, ITEL, WonContractIn(1992))	ITEL won the contract in 1992.	WonContract(ITEL, 1992)	e	False	False
203	ITEL managed to win the contract in 1992.	ManagedToWinContract(ITEL, 1992)	ITEL won the contract in 1992.	WonContract(ITEL, 1992)	e	False	False
204	ITEL tried to win the contract in 1992.	TriedToWinContract(ITEL, 1992)	ITEL won the contract in 1992.	WonContract(ITEL, 1992)	n	False	False
205	It is true that ITEL won the contract in 1992.	WonContract(ITEL, 1992)	ITEL won the contract in 1992.	WonContract(ITEL, 1992)	e	True	False
206	It is false that ITEL won the contract in 1992.	not WonContract(ITEL, 1992)	ITEL won the contract in 1992.	WonContract(ITEL, 1992)	c	False	True
207	Smith saw Jones sign the contract.	Saw(Smith, Jones, Contract)	Jones signed the contract.	SignedContract(jones, contract)	e	False	False
